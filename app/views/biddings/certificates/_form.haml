#wid-id-0.jarviswidget{"data-widget-colorbutton" => "false", "data-widget-editbutton" => "false"}
  %header
    %span.widget-icon
      %i.fa.fa-eye
    %h2 Certificados
  .widget-body
    = simple_form_for([:biddings, @certificate], html: {class: 'form-horizontal smart-form', autocomplete: 'off' }) do |f|
      %fieldset
        .row
          %section.col.col-6
            %label.label Nombre del profesional
            %label.input
              %select.form-control#professional-select{:name =>"certificate[professional_id]"}
                -if @action=="edit"
                  -@professional.each do |pro|
                    -if @certificate.professional_id==pro.id
                      %option{value: "#{pro.id}", selected:true} 
                        = "#{pro.name}"
                    -else
                      %option{value: "#{pro.id}"}
                        = "#{pro.name}"
                -else
                  -@professional.each do |pro|
                    %option{value: "#{pro.id}"} 
                      = "#{pro.name}"
        .row
          %section.col.col-6
            %label.label Nombre de la obra
            %label.input
              %select.form-control#work-select{:name =>"certificate[work_id]"}
                -if @action=="edit"
                  -@work.each do |wc|
                    -if @certificate.work_id==wc.id
                      %option{value: "#{wc.id}", selected:true} 
                        = "#{wc.name}"
                    -else
                      %option{value: "#{wc.id}"} 
                        = "#{wc.name}"
                -else
                  -@work.each do |wc|
                    %option{value: "#{wc.id}"} 
                      = "#{wc.name}"
            %section.col.col-15
              %input#change-check{type: "checkbox", :value=> "otros"}
                = "No es una de las Obras"

          %section.col.col-6
            %label.label Otra obra
            %label.input
              %input#another_work{:disabled=>"disabled"}
        %section.col.col-6
          %label.label Inicio de la obra
          %label.input
            %input#start{ :disabled=>"disabled"}
        %section.col.col-6
          %label.label Termino de la obra
          %label.input
            %input#finish{ :disabled=>"disabled"}
              
        .row
          %section.col.col-6
            %label.col-md-10.control-label Entidad contratante
        .row
          %section.col.col-6
            .input-group
              %select.form-control#category-select{:name =>"certificate[entity_id]"}
                - @entities.each do |entities|
                  - entities.each do |entity|
                    %option{:value => "#{entity.id}"}
                      = entity.name + ' ' + entity.surname
              %span.input-group-addon
                %i.fa.fa-gears  

        .row
          %section.col.col-6
            %label.label Cargo
            %label.input
              %select.form-control#work-select{:name =>"certificate[charge_id]"}
                -if @action=="edit"
                  -@charge.each do |wc|
                    -if @certificate.charge_id==wc.id
                      %option{value: "#{wc.id}", selected:true} 
                        = "#{wc.name}"
                    -else
                      %option{value: "#{wc.id}"} 
                        = "#{wc.name}"
                -else
                  -@charge.each do |wc|
                    %option{value: "#{wc.id}"} 
                      = "#{wc.name}"

        .row
          %section.col.col-6
            %label Cantidad de días trabajados
            %label.input
            .col-4
              %input#worked-day{:name=>"certificate[num_days]", :disabled=>"disabled"}
            %label.a{href: '#'} Agregar más fechas
        .row
          %section.col.col-6
            %label.col-md-8.control-label Fecha de Inicio
            .col-md-4
              .input-group#start-worker
                = f.input :start_date, as: :string, :input_html => {:class => 'form-control', :type => "date"}, label: false, onclick: "set_days"
                %span.input-group-addon
                  %i.fa.fa-calendar
        .row
          %section.col.col-6
            %label.col-md-8.control-label Fecha de Termino
            .col-md-4
              .input-group#finish-worker
                = f.input :finish_date, as: :string, :input_html => {:class => 'form-control', :type => "date"}, label: false, onclick: "set_days"
                %span.input-group-addon
                  %i.fa.fa-calendar
        .row
          %section.col.col-6
            %label.label Componentes de la obra:
        #get-comp  
          %section.col.col-6
            %label.select.type-training#comp-check
        #comp
          %section.col.col-6
            -if @component!=nil
              - @component.each do |comp|
                %input{name: "component_work", type: "checkbox", :value=> "#{comp.id}"}
                  = "#{comp.name}"
                %br
        .row
          %section.col.col-6
            .form-group
              %label.label Certificado
              .col-md-10
                = f.input :certificate, :input_html => { :class => 'btn btn-default' }, label: false, as: "file"
                %p.help-block
                  Subir el archivo correspondiente

        .row
          %section.col.col-6
            .form-group
              %label.label Otro
              .col-md-10
                = f.input :other, :input_html => { :class => 'btn btn-default' }, label: false, as: "file"
                %p.help-block
                  Subir el archivo correspondiente

      %footer
        %button.btn.btn-primary{type: "submit"}
          %i.fa.fa-save
            Guardar

:javascript


  function submit_validate(form){
    $(form['selector']).ajaxForm({
      beforeSubmit: function() {
        $(form['selector']).validate({
          // Rules for form validation
          rules : {
            'certificate[professional_id]' : {
              required : true
            },
            'certificate[work_id]' : {
              required : true,
              digits: true
            },
            'certificate[charge]' : {
              required : true
            },
            'certificate[start_date]' : {
              required : true
            },
            'certificate[finish_date]' : {
              required : true
            },
            'certificate[componentes_id]' : {
              required : true
            }
          },

          // Messages for form validation
          messages : {
            'certificate[professional_id]' : {
              required : 'Porfavor, ingresar el nombre del profesional'
            },
            'certificate[work_id]' : {
              required : 'Porfavor, ingresar el nombre de la obra',
            },
            'certificate[charge]' : {
              required : 'Porfavor, ingresar el cargo.'
            },
            'certificate[start_date]' : {
              required : 'Porfavor, ingresar la fecha de inicio de la obra.'
            },
            'certificate[finish_date]' : {
              required : 'Porfavor, ingresar la fecha de fin de la obra.'
            },
            'certificate[componentes_id]' : {
              required : 'Porfavor, ingresar seleccione los componentes'
            }
          },

          // Do not change code below
          errorPlacement : function(error, element) {
            error.insertAfter(element.parent());
          }
        });
        // Remove all Help-inLine
        $(".help-inline").remove();
        // Client Valid
        return $(form['selector']).valid();
      },
      target: '#content',
      success: function (data){
        $(".help-inline").parent().addClass("state-error");
      },
      error: function(xhr, status, error) {
      }
    });
  }

  $(document).ready(function () {

    var work_id = $("#work-select").val();
    complete_infocombo("#{get_component_from_work_biddings_certificates_path}", work_id, "#{form_authenticity_token}", "0302");
    set_day("#{dates_from_work_biddings_certificates_path}", work_id, "#{form_authenticity_token}", "0302");

    $('#change-check').change(function(){
      $('#work-select').attr('disabled', this.checked);
      $('#another_work').attr('disabled', !this.checked);
      $('#start').attr('disabled', !this.checked);
      $('#finish').attr('disabled', !this.checked);
      $('#comp').attr('disabled', this.checked);
    });

    if($('form[id^="edit_"]').length > 0) {
      submit_validate($('form[id^="edit_"]'));
    }
    else{
      submit_validate($('#new_certificate'));
    }

    var clicknum = 0;
    $("#work-select").click(function(){
      clicknum++;
      if(clicknum == 1){
       var work_id = $('#work-select').val();
       complete_infocombo("#{get_component_from_work_biddings_certificates_path}", work_id, "#{form_authenticity_token}", 0);
       set_day("#{dates_from_work_biddings_certificates_path}", work_id, "#{form_authenticity_token}", 0);
       clicknum = 4;
      }
    });

    $('#work-select').change(function(){
      var work_id = $(this).val();
      complete_infocombo("#{get_component_from_work_biddings_certificates_path}", work_id, "#{form_authenticity_token}", 0);
      set_day("#{dates_from_work_biddings_certificates_path}", work_id, "#{form_authenticity_token}", 0);
    });

    $('#work-select').keyup(function(){
      var work_id = $(this).val();
      complete_infocombo("#{get_component_from_work_biddings_certificates_path}", work_id, "#{form_authenticity_token}", 0);
      set_day("#{dates_from_work_biddings_certificates_path}", work_id, "#{form_authenticity_token}", 0);
    });

    function get_days(){
      var inicio =$('#start').val();
      var fin = $('#finish').val();
      if (inicio!=nil && fin!=nil)
        var days= fin-inicio;
        $('#worked-day').val(days);
    }

    function set_day(url, work_id, form_token, default_value){
      $.ajax({
        type: "POST",
        url: url,
        async: false,
        data: { work_id: work_id, authenticity_token: form_token}
      }).done(function(date){
        newOptions = [];
        $.each(data.start, data.finish, function(key, value){
          item = {};
          item['start'] = value.start_date;
          item['finish'] = value.finish_date;
          newOptions.push(item);
        });
        $('#start').empty();
        $('#finish').empty();
        $.each(newOptions, function(key,value){
          $('#start').append(
              $("<input></input>").attr("value", value.start_date).text(value.start_date)
          )
          $('#finish').append(
              $("<input></input>").attr("value", value.finish_date).text(value.finish_date)
          )
        });
      });
    }

    function complete_infocombo(url, work_id, form_token, default_value){
      var str_html = "";
      $.ajax({
          type: "POST",
          url: url,
          async: false,
          data: { work_id: work_id, authenticity_token: form_token}
      }).done(function( data ) {
        newOptions = [];
        $.each(data.component_work, function(key, value){
          item = {};
          item['name'] = value.name;
          item['id'] = value.id;
          console.log(value.name);
          newOptions.push(item);
        });
        $('#comp-check').empty();
        $.each(newOptions, function(key,value){
          str_html = str_html + "<label>" + value.name + "</label><br/>"
        });
        $('#comp-check').html(str_html);
      });
    }
  });