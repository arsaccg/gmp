#wid-id-0.jarviswidget{"data-widget-colorbutton" => "false", "data-widget-editbutton" => "false"}
  %header
    %span.widget-icon
      %i.fa.fa-eye
    %h2 Orden de Compra
  %div{:style => "padding-top: 0"}
    .jarviswidget-editbox
    .widget-body 
      = simple_form_for([:logistics, @purchaseOrder], html: {class: 'form-horizontal', autocomplete: 'off' }) do |f|
        .col-sm-12
          %fieldset
            %legend{'style' => 'border:none'}
            .col-md-6
              .form-group
                %label.col-md-2.control-label Proveedores
                .col-md-10
                  .input-group
                    %select.form-control#category-select{:name =>"purchase_order[supplier_id]"}
                      - @suppliers.each do |supp|
                        - if @purchaseOrder.supplier_id == supp.id
                          %option{:value => "#{supp.id}", :selected => true}
                            = supp.name
                        - else
                          %option{:value => "#{supp.id}"}
                            = supp.name
                    %span.input-group-addon
                      %i.fa.fa-truck
              .form-group
                %label.col-md-2.control-label Moneda
                .col-md-10
                  .input-group
                    %select.form-control#category-select{:name =>"purchase_order[money_id]"}
                      - @moneys.each do |money|
                        - if @purchaseOrder.money_id == money.id
                          %option{:value => "#{money.id}", :rel => "#{money.exchange_rate}", :selected => true}
                            = money.name
                        - else
                          %option{:value => "#{money.id}", :rel => "#{money.exchange_rate}"}
                            = money.name
                    %span.input-group-addon
                      %i.fa.fa-money
              .form-group
                %label.col-md-2.control-label Tipo de cambio
                .col-md-10
                  .input-group
                    = text_field(:purchase_order, :exchange_of_rate, :value => "#{@purchaseOrder.exchange_of_rate}", class: "form-control")
                    %span.input-group-addon
                      %i.fa.fa-warning
              .form-group
                %label.col-md-2.control-label Forma de pago
                .col-md-10
                  .input-group
                    %select.form-control#category-select{:name =>"purchase_order[method_of_payment_id]"}
                      - @methodOfPayments.each do |mop|
                        - if @purchaseOrder.method_of_payment_id == mop.id
                          %option{:value => "#{mop.id}", :selected => true}
                            = mop.name
                        - else
                          %option{:value => "#{mop.id}"}
                            = mop.name
                    %span.input-group-addon
                      %i.fa.fa-gears
              .form-group
                %label.col-md-2.control-label Estado
                .col-md-10
                  .input-group
                    = f.input :state, :input_html => {:class => 'form-control', :value => translate_purchase_order_state(@purchaseOrder.state)}, label: false, readonly: true
                    %span.input-group-addon
                      %i.fa.fa-flag
            .col-md-6
              .form-group
                %label.col-md-2.control-label Responsable
                .col-md-10
                  .input-group
                    = text_field(:purchaseOrder, :liable, class: "form-control", value: "#{@purchaseOrder.user.first_name} #{@purchaseOrder.user.last_name}", readonly: true)
                    %span.input-group-addon
                      %i.fa.fa-male
              .form-group
                %label.col-md-2.control-label Fecha de Emisión
                .col-md-10
                  .input-group
                    = f.input :date_of_issue, as: :string, :input_html => {:class => 'form-control', :type => "date"}, label: false
                    %span.input-group-addon
                      %i.fa.fa-calendar
              .form-group
                %label.col-md-2.control-label Fecha de Vencimiento
                .col-md-10
                  .input-group
                    = f.input :expiration_date, as: :string, :input_html => {:class => 'form-control', :type => "date"}, label: false
                    %span.input-group-addon
                      %i.fa.fa-calendar
              .form-group
                %label.col-md-2.control-label Fecha de Entrega
                .col-md-10
                  .input-group
                    = f.input :delivery_date, as: :string, :input_html => {:class => 'form-control', :type => "date"}, label: false
                    %span.input-group-addon
                      %i.fa.fa-calendar
              .form-group
                %label.col-md-2.control-label Glosa
                .col-md-10
                  .input-group
                    = f.input :description, placeholder: "Glosa", :input_html => {:class => 'form-control'}, label: false
                    %span.input-group-addon
                      %i.fa.fa-align-justify
        .col-sm-12
          %fieldset
            %legend Detalle de Orden de Compra
            .form-group
              .col-lg-3
              .col-lg-12
                %table#dt_basic.table.table-striped.table-bordered.table-hover.has-tickbox.smart-form
                  %thead
                    %tr
                      %th Código de la orden de Suministro
                      %th Código del Artículo
                      %th Nombre del Artículo
                      %th Unidad de Medida
                      %th Cantidad
                      %th Sector
                      %th Fase
                      %th Centro de Atención
                      %th Fecha Programada
                      %th Seleccionar
                  %tbody
                    - @purchaseOrder.purchase_order_details.each do |pod|
                      %tr
                        %td(style="display:none")
                          = hidden_field_tag 'purchase_order[purchase_order_details_attributes][' + @reg_n.to_s + '][delivery_order_detail_id]', pod.delivery_order_detail.id.to_i
                        %td=pod.delivery_order_detail.article.code
                        %td=pod.delivery_order_detail.article.description
                        %td.unit-of-measurement
                          =pod.delivery_order_detail.unit_of_measurement.symbol
                        %td.amount
                          =pod.delivery_order_detail.amount
                        %td.unit-price
                          = text_field_tag 'purchase_order[purchase_order_details_attributes][' + @reg_n.to_s + '][unit_price]', pod.unit_price, class: "form-control unit-price", onfocusout: "calculatePriceWithourIgv(this);"
                        %td.price-without-igv
                          - @unit_price_without_igv = pod.delivery_order_detail.amount * pod.unit_price
                          = text_field_tag 'unit_price_before_igv', "#{@unit_price_without_igv}", class: "form-control unit-price-before-igv", :readonly => true
                        %td.check-igv
                          %label.checkbox
                            - if pod.igv != nil
                              = check_box_tag 'purchase_order[purchase_order_details_attributes][' + @reg_n.to_s + '][igv]', nil, true, { class: 'order_purchase_igv', onchange: "enableFieldsForIgv(this);" }
                              %i
                            - else
                              = check_box_tag 'purchase_order[purchase_order_details_attributes][' + @reg_n.to_s + '][igv]', nil, nil, { class: 'order_purchase_igv', onchange: "enableFieldsForIgv(this);" }
                              %i
                        %td.price-with-igv
                          = text_field_tag 'purchase_order[purchase_order_details_attributes][' + @reg_n.to_s + '][unit_price_igv]', pod.unit_price_igv , class: "form-control unit-price-igv", :readonly => true
                        %td
                          = text_area_tag 'purchase_order[purchase_order_details_attributes][' + @reg_n.to_s + '][description]', pod.description, class: "form-control description"
                      - @reg_n += 1
        .form-actions{:style => "margin-top: 0;"}
          .row
            .col-md-12
              %button.btn.btn-primary{type: "submit"}
                %i.fa.fa-save
                  Guardar

:javascript
  
  $(document).ready(function(){

    $('form[id^="edit_purchase_order"]').ajaxForm({
      beforeSubmit: function(arr, $form, options) {
        $form.validate({
          // Rules for form validation
          rules : {
            'purchase_order[supplier_id]': {
              required: true
            },
            'purchase_order[money_id]': {
              required: true
            },
            'purchase_order[method_of_payment_id]': {
              required: true
            },
            'purchase_order[date_of_issue]': {
              required: true
            },
            'purchase_order[expiration_date]': {
              required: true
            },
            'purchase_order[delivery_date]': {
              required: true
            }
          },

          // Messages for form validation
          messages : {
            'purchase_order[supplier_id]': "Porfavor, especifica el proveedor.",
            'purchase_order[money_id]': "Porfavor, especifica el tipo de moneda con que se trabajará.",
            'purchase_order[method_of_payment_id]': "Porfavor, especifica el método de págo.",
            'purchase_order[date_of_issue]': "Porfavor, especifica la fecha de emisión.",
            'purchase_order[expiration_date]': "Porfavor, especifica la fecha de expiración.",
            'purchase_order[delivery_date]': "Porfavor, especifica la fecha de entrega."
          },
          highlight: function (element) {
            $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
          },
          unhighlight: function (element) {
            $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
          },
          errorElement: 'span',
          errorClass: 'help-block',
          errorPlacement: function (error, element) {
            if (element.parent('.input-group').length) {
              error.insertAfter(element.parent());
            } else {
              error.insertAfter(element);
            }
          }
        });

        return $form.valid();
      },
      target: '#content'
    });

  });