%tbody
  - hash_items = Hash.new
  - @itembybudgets_main.each do |ib|
    %tr(class="first_#{ib.order}")
      %td(class="#{get_color_by_order(ib.order)}")
        %strong
          =ib.order
          %a{href: "javascript:toogle_three('#{get_clasification_by_order(ib.order+'.00')}', '#{ib.order}');"}
            =ib.subbudgetdetail == ''? ib.title : ib.subbudgetdetail
      %td
      %td
      %td(style="text-align: right;")
        %strong
          = number_to_currency( amount_contractual(ib.order, @budget.id), :unit=>'' )
      %td
      %td(style="text-align: right;")
        %strong
          = number_to_currency( amount_prev(ib.order, @budget.id, @valorization.valorization_date), :unit=>'' )
      %td
      %td(style="text-align: right;")
        %strong
          = number_to_currency( amount_actual(ib.order, @budget.id, @valorization.id), :unit=>'' )
      %td
      %td(style="text-align: right;")
        %strong
          = number_to_currency( amount_acumulated(ib.order, @budget.id, @valorization.valorization_date, @valorization.id), :unit=>'' )
      %td
      %td(style="text-align: right;")
        %strong
          = number_to_currency( amount_remainder(ib.order, @budget.id, @valorization.valorization_date, @valorization.id), :unit=>'' )
      %td(style="text-align: right;")
        %strong
          = "#{advance_percent(ib.order, @budget.id, @valorization.valorization_date, @valorization.id).round(2)} %"

    
    -si_prev = Hash.new
    -vals = Valorization.where("valorization_date < ? AND budget_id = ?", @valorization.valorization_date.to_s, @valorization.budget_id).order(:valorization_date)
    -vals.each do |vs|
      -val = Valorization.get_sub_itembybudgets(ib.order, vs.id.to_s, @valorization.budget_id)
      -val.each do |v|
        -si_prev[v[2]] = [v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[10], v[11], 0.0, 0.0, v[12], v[13], v[14], v[15], v[16]]



    - sub_item = Valorization.get_sub_itembybudgets(ib.order.to_s, @valorization.id.to_s, @budget.id.to_s)
    - sub_item.each do |si|
      - p "~~~~~~~~~~~~~~~~si~~~~~~~~~~~~~~~"
      - key_str = si[0].to_s
      - p si
      - p si[0]
      - if key_str != nil
        -if si != nil
          - hash_items[key_str] = si  
       
    - @itembybudgets.where("`order` LIKE ?", ib.order.to_s + "%").each do |ibb|
      
      - si = hash_items[ibb.id.to_s]
      %tr(class="#{get_clasification_by_order(ibb.order)}_#{ibb.order}")
        %td(class="#{get_color_by_order(ibb.order)}")
          %span(style="color:transparent;")
            ='_'*(ibb.order.length-2)
          %a{:href => "javascript:toogle_three('#{get_clasification_by_order(ibb.order+'.00')}', '#{ibb.order}');"}
            = ibb.order
            = ibb.subbudgetdetail == ''? ibb.title : ibb.subbudgetdetail
        / %td(style="text-align: center;")
        /   = si[4] rescue " "
        -if ibb.measured != nil && ibb.measured > 0
          -if (si[6].to_f rescue 0) > 0
            %td(style="text-align: right;")
              = si[5].to_f == 0 ? '-' : number_to_currency( (si[5].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si[6].to_f == 0 ? '-' : number_to_currency( (si[6].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = (si[5].to_f * si[6].to_f) == 0 ? '-' : number_to_currency( (si[5].to_f * si[6].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si[8].to_f == 0 ? '-' : number_to_currency( (si[8].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si[9].to_f == 0 ? '-' : number_to_currency( (si[9].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si[10].to_f == 0 ? '-' : number_to_currency( (si[10].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si[11].to_f == 0 ? '-' : number_to_currency( (si[11].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si[12].to_f == 0 ? '-' : number_to_currency( (si[12].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si[13].to_f == 0 ? '-' : number_to_currency( (si[13].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si[14].to_f == 0 ? '-' : number_to_currency( (si[14].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si[15].to_f == 0 ? '-' : number_to_currency( (si[15].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si[16].round(2) rescue 0 #PORCENTAJE DE AVANCE
              = '%' 
          -elsif si_prev[ibb.order] != nil
            %td(style="text-align: right;")
              = si_prev[ibb.order][5].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][5].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si_prev[ibb.order][6].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][6].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si_prev[ibb.order][7].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][7].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si_prev[ibb.order][8].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][8].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si_prev[ibb.order][9].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][9].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si_prev[ibb.order][10].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][10].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si_prev[ibb.order][11].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][11].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si_prev[ibb.order][12].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][12].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si_prev[ibb.order][13].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][13].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si_prev[ibb.order][14].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][14].to_f), :unit=>'' )
            %td(style="text-align: right;")
              = si_prev[ibb.order][15].to_f == 0 ? '-' : number_to_currency( (si_prev[ibb.order][15].to_f), :unit=>'' )
            %td(style="text-align: right;")
              =si_prev[ibb.order][16]
              = '%'
          -else
            %td(style="text-align: right;")
              = number_to_currency( ibb.price, :unit=>'')
            %td(style="text-align: right;")
              = number_to_currency( ibb.price, :unit=>'')
            %td(style="text-align: right;")
              = number_to_currency( (ibb.price * ibb.measured), :unit=>'')
            %td
            %td
            %td
            %td
            %td
            %td
            %td
            %td
            %td
        -else
          %td
          %td
          %td
          %td
          %td
          %td
          %td
          %td
          %td
          %td
          %td
          %td
      -@last_result = ibb
    
  %tr
    %td(colspan="15")
      - @direct_cost_cont = 0
      - @direct_cost_prev = 0
      - @direct_cost_act = 0
      - @direct_cost_acc = 0
      - @direct_cost_rem = 0
      -@itembybudgets_main.each do |ib|
     
        - c_amount_contractual = amount_contractual(ib.order, @budget.id)
     
        - @direct_cost_cont = @direct_cost_cont + c_amount_contractual

        - c_amount_prev = amount_prev(ib.order, @budget.id, @valorization.valorization_date)
   
        - @direct_cost_prev = @direct_cost_prev + c_amount_prev
 
        - c_amount_act = amount_actual(ib.order, @budget.id, @valorization.id)
    
        - @direct_cost_act = @direct_cost_act + c_amount_act 
 
        - c_amount_acc = amount_acumulated(ib.order, @budget.id, @valorization.valorization_date, @valorization.id)
        - @direct_cost_acc = @direct_cost_acc + c_amount_acc 
        - c_amount_rem = amount_remainder(ib.order, @budget.id, @valorization.valorization_date, @valorization.id)
     
        - @direct_cost_rem = @direct_cost_rem + c_amount_rem 
 

  %tr 
    %td
      %strong
        COSTO DIRECTO
    %td
    %td
    %td(style="text-align: right;")
      %strong
        -#MONTO contract
        = number_to_currency( @direct_cost_cont, :unit=>'')
    %td
    %td(style="text-align: right;")
      %strong
        -#MONTO anterior
        = number_to_currency( @direct_cost_prev, :unit=>'')
    %td
    %td(style="text-align: right;")
      %strong
        -#MONTO actual  
        = number_to_currency( @direct_cost_act, :unit=>'')
    %td
    %td(style="text-align: right;")
      %strong
        -#MONTO acumulado
        = number_to_currency( @direct_cost_acc, :unit=>'')
    %td
    %td(style="text-align: right;")
      %strong
        -#SALDO
        = number_to_currency( @direct_cost_rem, :unit=>'')
    %td(style="text-align: right;")
      = (@direct_cost_acc / @direct_cost_cont * 100).round(2) rescue 0
      ='%'
  %tr 
    %td
      Gastos Generales
    %td(style="text-align: right;")
      = (@budget.general_expenses.to_f * 100).round(2).to_s + '%'
    %td
    %td(style="text-align: right;")
      -#MONTO contract
      - num = (@direct_cost_cont * @budget.general_expenses.to_f).round(2)
      = number_to_currency( num, :unit=>'')
    %td
    %td(style="text-align: right;")
      -#MONTO anterior
      - num = (@direct_cost_prev * @budget.general_expenses.to_f).round(2)
      = number_to_currency( num, :unit=>'')
    %td
    %td(style="text-align: right;")
      -#MONTO actual  
      - num = (@direct_cost_act * @budget.general_expenses.to_f).round(2) 
      = number_to_currency( num, :unit=>'')
    %td
    %td(style="text-align: right;")
      -#MONTO acumulado
      - num = (@direct_cost_acc * @budget.general_expenses.to_f).round(2) 
      = number_to_currency( num, :unit=>'')
    %td
    %td(style="text-align: right;")
      -#SALDO
      - num = (@direct_cost_rem * @budget.general_expenses.to_f).round(2)
      = number_to_currency( num, :unit=>'')
    %td(style="text-align: right;")
      = ((@direct_cost_acc * @budget.general_expenses.to_f)/(@direct_cost_cont * @budget.general_expenses.to_f) * 100).round(2)
      ='%'
  %tr 
    %td
      %strong
        Utilidad
    %td(style="text-align: right;")
      =(@budget.utility.to_f * 100).round(2).to_s + '%'
    %td
    %td(style="text-align: right;")
      -#MONTO contract
      - num = (@direct_cost_cont * @budget.utility.to_f).round(2)
      = number_to_currency( num, :unit=>'')
    %td
    %td(style="text-align: right;")
      -#MONTO anterior
      - num = (@direct_cost_prev * @budget.utility.to_f).round(2)
      = number_to_currency( num, :unit=>'')
    %td
    %td(style="text-align: right;")
      -#MONTO actual  
      - num = (@direct_cost_act * @budget.utility.to_f).round(2) 
      = number_to_currency( num, :unit=>'')
    %td
    %td(style="text-align: right;")
      -#MONTO acumulado
      - num = (@direct_cost_acc * @budget.utility.to_f).round(2) 
      = number_to_currency( num, :unit=>'')
    %td
    %td(style="text-align: right;")
      -#SALDO
      - num = (@direct_cost_rem * @budget.utility.to_f).round(2)
      = number_to_currency( num, :unit=>'')
    %td(style="text-align: right;")
      = ((@direct_cost_acc * @budget.utility.to_f)/(@direct_cost_cont * @budget.utility.to_f) * 100).round(2)
      ='%'
  %tr 
    %td(colspan="3")
      %strong
        COSTO DE OBRA
    %td(style="text-align: right;")
      %strong
        =#MONTO contract
        -contractual =@direct_cost_cont + (@direct_cost_cont * @budget.general_expenses.to_f) + (@direct_cost_cont * @budget.utility.to_f)
        = number_to_currency( contractual, :unit=>'S/. ')
    %td
    %td(style="text-align: right;")
      %strong
        =#MONTO anterior
        = number_to_currency( ((@direct_cost_prev + (@direct_cost_prev * @budget.general_expenses) + (@direct_cost_prev * @budget.utility)) rescue 0), :unit=>'S/. ')
    %td
    %td(style="text-align: right;")
      %strong
        =#MONTO actual  
        = number_to_currency( ((@direct_cost_act + (@direct_cost_act * @budget.general_expenses) + (@direct_cost_act * @budget.utility)) rescue 0), :unit=>'S/. ')
    %td
    %td(style="text-align: right;")
      %strong
        =#MONTO acumulado
        -accumulated = @direct_cost_acc + (@direct_cost_acc * @budget.general_expenses.to_f) + (@direct_cost_acc * @budget.utility.to_f)
        = number_to_currency( accumulated, :unit=>'S/. ')
    %td
    %td(style="text-align: right;")
      %strong
        =#SALDO
        = number_to_currency( ((@direct_cost_rem + (@direct_cost_rem * @budget.general_expenses) + (@direct_cost_rem * @budget.utility)) rescue 0), :unit=>'S/. ')
    %td(style="text-align: right;")
      %strong
        =((accumulated/contractual)*100).round(2)
        ='%'

:javascript
  $('.right-area').ready(function(){
    hide_all();
  });

  function hide_all(){
    last_result = parseInt("#{@last_result.order}");
    for (i = 1; i <= last_result; i++) { 
      order_code = pad(i, 2);
      console.log(order_code);
      toogle_three('second', order_code);
    }
  }

  function pad (str, max) {
    str = str.toString();
    return str.length < max ? pad("0" + str, max) : str;
  }


  function toogle_three(level, id){
    tr_level = $("[class^='" + level + "_" +  id + "']");
    tr_level.css("display") == 'table-row' ? tr_level.css("display","none") : tr_level.css("display","table-row");
    
    switch(level){
      case "second":
        $("[class^='third_" +  id + "']").each(function(){
          if ($(this).css("display") == 'table-row'){ toogle_three('third', id); }
        });
        break;
      case "third":
        $("[class^='fourth_" +  id + "']").each(function(){
          if ($(this).css("display") == 'table-row'){ toogle_three('fourth', id); }
        });
        break;
      case "fourth":
        $("[class^='fifth_" +  id + "']").each(function(){
          if ($(this).css("display") == 'table-row'){ toogle_three('fifth', id); }
        });
        break;
      case "fifth":
        $("[class^='sixth_" +  id + "']").each(function(){
          if ($(this).css("display") == 'table-row'){ toogle_three('sixth', id); }
        });
        break;
    }
  }

  function show_level(level){
    toogle_three(level, '');

    switch(level){
      case "second":
        $("[class^='first_']").each(function(){
          if ($(this).css("display") == 'none'){ show_level('first'); }
        });
        break;
      case "third":
        $("[class^='second_']").each(function(){
          if ($(this).css("display") == 'none'){ show_level('second'); }
        });
        break;
      case "fourth":
        $("[class^='third_']").each(function(){
          if ($(this).css("display") == 'none'){ show_level('third'); }
        });
        break;
      case "fifth":
        $("[class^='fourth_']").each(function(){
          if ($(this).css("display") == 'none'){ show_level('fourth'); }
        });
        break;
      case "sixth":
        $("[class^='fifth_']").each(function(){
          if ($(this).css("display") == 'none'){ show_level('fifth'); }
        });
        break;
    }
  }

  function openLevel(){
    console.log('cambio');
    var level = $('#level_r').val();
    console.log(level);
    show_level(level);
  }

  function toogle_detail(id_str){
    
    if($(".detail_" + id_str).css("display") == 'table-row')
      $(".detail_" + id_str).css("display","none");
    else
      $(".detail_" + id_str).css("display","table-row");
    
  }
