#wid-id-0.jarviswidget{"data-widget-colorbutton" => "false", "data-widget-editbutton" => "false"}
  %header
    %span.widget-icon
      %i.fa.fa-pencil-square-o.fa-fw 
    %h2
      %strong Editar Provision
  %div
    .jarviswidget-editbox
    .widget-body 
      = simple_form_for([:administration, @provision], html: {class: 'form-horizontal', novalidate: 'novalidate', autocomplete: 'off' }) do |f|
        .col-sm-12
          %fieldset{ :style => 'margin-top: 20px;' }
            = hidden_field_tag 'provision[cost_center_id]', @cost_center, class: 'form-control', id: 'cost-center-selected'
            .col-md-6
              .form-group
                %label.col-md-2.control-label Proveedores
                .col-md-10
                  %input#proveedor-select.form-control{"name" =>"provision[entity_id]", 'type' => 'hidden', 'style' => 'width:100%;padding: 0;border: none;', 'value' => "#{@provision.entity_id}"}

            .col-md-2
              .form-group
                %label.col-md-4.control-label N° Guia
                .col-md-8
                  .input-group
                    = f.input :number_of_guide, placeholder: "N° Guia", :input_html => {:class => 'form-control'}, label: false
                    %span.input-group-addon
                      %i.fa.fa-calendar

            .col-md-4
              .form-group
                %label.col-md-2.control-label Fecha
                .col-md-10
                  .input-group
                    = f.input :accounting_date, as: :string, :input_html => {:class => 'form-control', :type => "date"}, label: false
                    %span.input-group-addon
                      %i.fa.fa-calendar

          %fieldset
            .col-md-3
              .form-group
                %label.col-md-4.control-label Tipo Documento
                .col-md-8
                  %select.select2.form-control{:name => 'provision[document_provision_id]', :style => 'width:100%;padding: 0;border: none;'}
                    - @documentProvisions.each do |x|
                      - if @provision.document_provision_id == x.id
                        %option{:value => "#{x.id}", :selected => true}
                          = x.name
                      - else
                        %option{:value => "#{x.id}"}
                          = x.name
            .col-md-2
              .form-group
                %label.col-md-3.control-label Serie
                .col-md-8
                  .input-group
                    = f.input :series, placeholder: "Serie", :input_html => {:class => 'form-control'}, label: false
                    %span.input-group-addon
                      %i.fa.fa-money

            .col-md-3
              .form-group
                %label.col-md-4.control-label N° Doc.
                .col-md-8
                  .input-group
                    = f.input :number_document_provision, :input_html => {:class => 'form-control'}, label: false
                    %span.input-group-addon
                      %i.fa.fa-calendar

            .col-md-4
              .form-group
                %label.col-md-2.control-label Glosa
                .col-md-10
                  .input-group
                    = f.input :description, placeholder: "Glosa", :input_html => {:class => 'form-control'}, label: false
                    %span.input-group-addon
                      %i.fa.fa-align-justify
          %fieldset
            %legend Elección del Insumo
            .row
              .col-lg-12.col-md-12
                %label.col-lg-1.control-label{:for => "article_id"} Insumos
                .col-lg-6.col-md-6
                  %input#article-select.select2.bigdrop.select2-offscreen.form-control{'name' => 'article_id', 'type' => 'hidden', 'style' => 'width:100%;padding: 0;border: none;'}

                .col-lg-1.col-md-1
                  = text_field_tag 'amount', nil, class: 'form-control', id: 'article-amount', value: '1'

                .col-lg-1.col-md-1
                  %div
                    %a(href="javascript:add_article_item();" id="btn-add-article" class="btn btn-success" role="button")
                      Agregar

                .col-lg-2.col-md-2{ :style => 'width: 13.666667%;' }
                  %div
                    %a#btn-add-orders(href="javascript:add_order_item();" class="btn btn-info" role="button")
                      Agregar de Ordenes

                .col-lg-1.col-md-1
                  %a#calculate-amounts{ :href => "javascript:calculate_amounts();", :class => "btn btn-info", :role => "button" }
                    Calcular Totales

          .row{:style=>"overflow-x:scroll"}
            %fieldset{ :style => "margin-top: 20px; margin-bottom: 20px;" }
              %table.table.table-condensed.table-bordered.table-striped.table-hover.has-tickbox.smart-form#summary-direct-provisions{:style => "font-size: 12px; width: 1600px;", 'aria-describedby' => "data-table_info"}
                %thead
                  %tr
                    %th{ :style => 'width: 14%;' } Nombre del Artículo
                    %th U.M.
                    %th Cuenta Contable
                    %th{ :style => 'width: 6%;'} Sector
                    %th{ :style => 'width: 6%;'} Fase
                    %th Cantidad
                    %th Precio Unitario
                    %th Descuentos
                    %th Total sin IGV
                    %th IGV
                    %th IGV(S/.)
                    %th Total con IGV
                    %th Cod.Orden
                    %th Descripción
                    %th{:style => "text-align:center;"}
                      %a.btn.btn-danger.btn-xs{ :href => 'javascript:void(0)' }
                        %i.fa.fa-trash-o
                %tbody{:id => "provisions_direct_items_table"}
                  - if @action == 'edit'
                    - array_values = Array.new
                    - @provision.provision_direct_purchase_details.each do |pod|
                      - array_values << @reg_n.to_s
                      %tr{id: "tr-" + @reg_n.to_s}
                        %td{:style => "display:none", :class => "provision_article-id"}
                          = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][article_id]', pod.article_id
                          = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][id]', pod.id.to_i rescue nil
                        %td= Article.find(pod.article_id).name.to_s
                        %td= Article.find(pod.article_id).unit_of_measurement.symbol.to_s
                        %td.account-accountant
                          %input{'name' => 'provision[provision_direct_purchase_details_attributes]['+@reg_n.to_s+'][account_accountant_id]', 'id' => "#{@reg_n.to_s}"+'a', 'type' => 'hidden', 'style' => 'width:100%;padding: 0;border: none;', 'value'=>pod.account_accountant_id}
                        %td.sector
                          -if pod.flag.to_i == 1
                            %select.form-control{:name =>"provision[provision_direct_purchase_details_attributes][#{@reg_n.to_s}][sector_id]", :required => true, title:'No puede dejar este campo vacio'}
                              %option{:value => nil, :disabled => true} Seleccionar Sector
                              - @sectors.each do |sector|
                                %optgroup{:label => "#{sector.name}"}
                                  -Sector.getSubSectors(sector.code).each do |subsector|
                                    %option{:value => "#{subsector.id}", :selected=>"#{subsector.id}"=="#{pod.sector_id}"}
                                      = subsector.name
                          -else
                            - s = Sector.find(pod.sector_id)
                            = s.code + " - " + s.name
                        %td.phase
                          -if pod.flag.to_i == 1
                            %input{'name' => 'provision[provision_direct_purchase_details_attributes]['+@reg_n.to_s+'][phase_id]', 'type' => 'hidden', 'id' => "#{@reg_n.to_s}"+'p', 'style' => 'width:100%;padding: 0;border: none;', 'value'=>pod.phase_id}
                            %div.cont 1
                          -else
                            -p = Phase.find(pod.phase_id)
                            = p.code
                            %div.cont 0

                        %td.amount
                          = text_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][amount]', pod.amount , class: "form-control unit-price-igv", onfocusout: "calculatePrice(this);", onkeypress: "return isNumber(event);"
                        
                        %td.unit-price
                          = text_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][price]', pod.price, class: "form-control unit-price-item", onfocusout: "calculatePriceWithoutIgv(this);", onkeypress: "return isNumber(event);"

                        %td.discount-before{:class => "provision_discount-before"}
                          = text_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][discount_before]', pod.discount_before , class: "form-control unit-price-igv", onkeypress: "return isNumber(event);"

                        %td.price-without-igv
                          = text_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][unit_price_before_igv]', pod.unit_price_before_igv, class: "form-control unit-price-without-igv", :readonly => true

                        %td.check-igv
                          %label.checkbox
                            = check_box_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][igv]', pod.igv, { class: 'provision_direct_igv', onchange: "enableFieldsForIgv(this);" }
                            %i

                        %td.quantity-igv{ :class => "provision_quantity-igv"}
                          = text_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][quantity_igv]',pod.quantity_igv, class: "form-control igv-item", :readonly => true

                        %td.price-with-igv
                          = text_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][unit_price_igv]', pod.unit_price_igv, class: "form-control unit-price-igv", :readonly => true

                        %td.order_origin{:style => "text-align:center;"}
                          = '-'

                        %td.description
                          = text_area_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][description]', pod.description, class: "form-control description"

                        %td.delete-item
                          %label.checkbox
                            = check_box 'provision[provision_direct_purchase_details_attributes]', '[' + @reg_n.to_s + '][_destroy]'
                            %i

                      :javascript
                        $(document).ready(function(){
                          var a = #{@reg_n} + "a";
                          var p = #{@reg_n} + "p";
                          $('#'+a).select2({
                            placeholder: "Buscar cuenta contable...",
                            minimumInputLength: 3,
                            ajax: {
                              url: "#{account3l_administration_provision_articles_path}",
                              dataType: 'json',
                              type: 'POST',
                              quietMillis: 100,
                              data: function(term, page){
                                return {
                                  q: term,
                                  page: page,
                                  authenticity_token: "#{form_authenticity_token}"
                                };
                              },
                              results: function(data, page){
                                return {results: data.articles};
                              }
                            },
                            initSelection: function(element, callback) {
                              var id=$(element).val();
                              if (id != "") {
                                $.ajax("#{account3l_administration_provision_articles_path}", {
                                  type: 'POST',
                                  data: {
                                    element: id,
                                    authenticity_token: "#{form_authenticity_token}"
                                  },
                                  dataType: "json"
                                }).done(function(data) { 
                                  callback(data.articles[0]);
                                });
                              }
                            },
                            formatResult: function(node){ return '<div>' + node.code +'</div>' },
                            formatSelection: function(node){ return (node.code) },
                            escapeMarkup: function (m) { return m; }
                          });

                          $('#'+p).select2({
                            placeholder: "Buscar cuenta contable...",
                            minimumInputLength: 3,
                            ajax: {
                              url: "#{phases3l_administration_provision_articles_path}",
                              dataType: 'json',
                              type: 'POST',
                              quietMillis: 100,
                              data: function(term, page){
                                return {
                                  q: term,
                                  page: page,
                                  authenticity_token: "#{form_authenticity_token}"
                                };
                              },
                              results: function(data, page){
                                return {results: data.articles};
                              }
                            },
                            initSelection: function(element, callback) {
                              var id=$(element).val();
                              if (id != "") {
                                $.ajax("#{phases3l_administration_provision_articles_path}", {
                                  type: 'POST',
                                  data: {
                                    element: id,
                                    authenticity_token: "#{form_authenticity_token}"
                                  },
                                  dataType: "json"
                                }).done(function(data) { 
                                  callback(data.articles[0]);
                                });
                              }
                            },
                            formatResult: function(node){ return '<div>' + node.code +'</div>' },
                            formatSelection: function(node){ return (node.code) },
                            escapeMarkup: function (m) { return m; }
                          });
                        });

                      - @reg_n += 1

              %br
              %br

          .row
            %fieldset{ :style => "margin-top: 20px; margin-bottom: 20px;" }
              %table.table.table-condensed.table-bordered.table-striped.table-hover.has-tickbox.smart-form#summary_totals_provisions{ :style => 'width:15%; float:right;' }
                %tbody
                  %tr
                    %td{ :style => 'font-weight: bold;' } Total sin IGV
                    %td{ :style => 'font-weight: bold;', :id => 'stp_total_wt_igv' } S/. 0.00
                  %tr
                    %td{ :style => 'font-weight: bold;' } IGV
                    %td{ :style => 'font-weight: bold;', :id => 'stp_total_igv' } S/. 0.00
                  %tr
                    %td{ :style => 'font-weight: bold;' } Total con IGV
                    %td{ :style => 'font-weight: bold;', :id => 'stp_total_w_igv' } S/. 0.00

        .col-sm-12.col-md-12{:style => "margin-bottom: 20px; margin-top: 20px;"}
          .row
            %button.btn.btn-primary{type: "submit"}
              %i.fa.fa-save
                Guardar

#modalOrderItems.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "modalDeliveryItemsLabel", role: "dialog", tabindex: "-1"}
  .modal-dialog{ :style => 'width: 60%;' }
    .modal-content
      .modal-body#modalOrderItemsContent

:javascript
  
  $(document).ready(function(){ 
    $('select').select2();
    $('#proveedor-select').select2({
      placeholder: "Buscar proveedor...",
      minimumInputLength: 3,
      ajax: {
        url: "#{display_proveedor_administration_provision_articles_path}",
        dataType: 'json',
        type: 'POST',
        quietMillis: 100,
        data: function(term, page){
          return {
            q: term,
            page: page,
            authenticity_token: "#{form_authenticity_token}"
          };
        },
        results: function(data, page){
          return {results: data.articles};
        }
      },
      initSelection: function(element, callback) {
        var id=$(element).val();
        if (id != "") {
          $.ajax("#{display_proveedor_administration_provision_articles_path}", {
            type: 'POST',
            data: {
              element: id,
              authenticity_token: "#{form_authenticity_token}"
            },
            dataType: "json"
          }).done(function(data) { 
            callback(data.articles[0]);
          });
        }
      },
      formatResult: function(node){ return '<div>' + node.code + ' - ' + node.name +'</div>' },
      formatSelection: function(node){ return (node.code + ' - ' + node.name ) },
      escapeMarkup: function (m) { return m; }
    });
        
    $('#article-select').select2({
      placeholder: "Buscar Insumos...",
      minimumInputLength: 3,
      ajax: {
        url: "#{display_articles_administration_provision_articles_path}",
        dataType: 'json',
        type: 'POST',
        quietMillis: 100,
        data: function(term, page){
          return {
            q: term,
            page: page,
            authenticity_token: "#{form_authenticity_token}"
          };
        },
        results: function(data, page){
          return {results: data.articles};
        }
      },
      formatResult: function(node){ return '<div>' + node.code + ' - ' + node.name + ' - ' + node.symbol + '</div>' },
      formatSelection: function(node){ return (node.code + ' - ' + node.name + ' - ' + node.symbol) },
      escapeMarkup: function (m) { return m; }
    });



    $('#new_provision').ajaxForm({
      beforeSubmit: function() {
        $('#new_provision').validate({
          // Rules for form validation
          rules : {
            'provision[entity_id]' : {
              required : true
            },
            'provision[document_provision_id]' : {
              required : true,
            },
            'provision[number_document_provision]' : {
              required : true,
            },
            'provision[accounting_date]' : {
              required : true
            },
            'provision[series]' : {
              required : true
            }
          },

          // Messages for form validation
          messages : {
            'provision[entity_id]' : {
              required : 'El proveedor es obligatorio.'
            },
            'deliveryOrder[document_provision_id]' : {
              required : 'El tipo de Documento es obligatorio.',
            },
            'provision[number_document_provision]' : {
              required : 'El numero del Documento es obligatorio.'
            },
            'provision[accounting_date]' : {
              required : 'La fecha es requerida.'
            },
            'provision[series]' : {
              required : 'El número de serie es requerida.'
            }
          },
          highlight: function (element) {
            $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
          },
          unhighlight: function (element) {
            $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
          },
          errorElement: 'span',
          errorClass: 'help-block',
          errorPlacement: function (error, element) {
            if (element.parent('.input-group').length) {
              error.insertAfter(element.parent());
            } else {
              error.insertAfter(element);
            }
          }
        });
        return $('#new_provision').valid();
      },
      target: '#content'
    });

    $('form[id^="edit_"]').ajaxForm({
      beforeSubmit: function() {
        $('form[id^="edit_"]').validate({
          // Rules for form validation
          rules : {
            'provision[entity_id]' : {
              required : true
            },
            'provision[document_provision_id]' : {
              required : true,
            },
            'provision[number_document_provision]' : {
              required : true,
            },
            'provision[accounting_date]' : {
              required : true
            },
            'provision[series]' : {
              required : true
            }
          },

          // Messages for form validation
          messages : {
            'provision[entity_id]' : {
              required : 'El proveedor es obligatorio.'
            },
            'deliveryOrder[document_provision_id]' : {
              required : 'El tipo de Documento es obligatorio.',
            },
            'provision[number_document_provision]' : {
              required : 'El numero del Documento es obligatorio.'
            },
            'provision[accounting_date]' : {
              required : 'La fecha es requerida.'
            },
            'provision[series]' : {
              required : 'El número de serie es requerida.'
            }
          },
          highlight: function (element) {
            $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
          },
          unhighlight: function (element) {
            $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
          },
          errorElement: 'span',
          errorClass: 'help-block',
          errorPlacement: function (error, element) {
            if (element.parent('.input-group').length) {
              error.insertAfter(element.parent());
            } else {
              error.insertAfter(element);
            }
          }
        });

        return $('form[id^="edit_"]').valid();
      },
      target: '#content'
    });
  });

  function add_article_item(){

    var article_id = $("#article-select").val();
    str_item = {authenticity_token: "#{form_authenticity_token}", article_id: $("#article-select").val(), amount: $("#article-amount").val()};

    append_url_ajax('#{puts_details_in_provision_administration_provision_articles_path}', 'provisions_direct_items_table', str_item, 0, 'POST');
  }

  /* Funciones de Calculo */

  function calculatePriceWithoutIgv(element){
    var amount = parseFloat($(element).parent().siblings('.amount').find('input').val()).toFixed(4);
    var discount = parseFloat($(element).parent().siblings('.discount-before').find('input.discount-before').val()).toFixed(4);
    var discount_percent = $(element).parent().siblings('.discount-before').find('.discount-before-percent').val();
    
    if(isNaN(discount)){
      discount = 0;
    }

    if(isNaN(discount_percent)){
      discount_percent = 0;
    } else {
      discount = (discount_percent/100) * ($(element).val() * amount);
      $(element).parent().siblings('.discount-before').find('.discount-before').val(discount);
    }

    var price_without_igv = parseFloat(($(element).val() * amount) - discount).toFixed(2);

    $(element).parent().siblings('.price-without-igv').find('input').val(price_without_igv);
    $(element).parent().siblings('.price-with-igv').find('input').val(price_without_igv);
  }

  function calculatePrice(element){
    var amount = parseFloat($(element).val()).toFixed(4);
    var discount = parseFloat($(element).parent().siblings('.discount-before').find('input.discount-before').val()).toFixed(4);
    var discount_percent = $(element).parent().siblings('.discount-before').find('.discount-before-percent').val();

    if(isNaN(discount)){
      discount = 0;
    }

    if(isNaN(discount_percent)){
      discount_percent = 0;
    } else {
      discount = (discount_percent/100) * ($(element).parent().siblings('.unit-price').find('input').val() * amount);
      $(element).parent().siblings('.discount-before').find('.discount-before').val(discount);
    }

    var price_without_igv = parseFloat(($(element).parent().siblings('.unit-price').find('input').val() * amount)-discount).toFixed(2);


    $(element).parent().siblings('.price-without-igv').find('input').val(price_without_igv);
    $(element).parent().siblings('.price-with-igv').find('input').val(price_without_igv);
  }

  function calculatePriceWithoutIgvFromDiscount(element){
    var discount = parseFloat($(element).val()).toFixed(4);
    var amount = parseFloat($(element).parent().siblings('.amount').find('input').val()).toFixed(4);
    var price = parseFloat($(element).parent().siblings('.unit-price').find('input').val()).toFixed(4);

    if(isNaN(discount)){ discount = 0; }
    if(isNaN(amount)){ amount = 0; }
    if(isNaN(price)){ price = 0; }

    var discount_percent = parseFloat((discount/(amount*price))*100).toFixed(2);
    var price_without_igv = (amount*price)-discount;

    $(element).siblings('.discount-before-percent').val(discount_percent);
    $(element).parent().siblings('.price-without-igv').find('input').val(price_without_igv);
    $(element).parent().siblings('.price-with-igv').find('input').val(price_without_igv);
  }

  function calculatePriceWithoutIgvFromDiscountPercent(element){

    var amount = parseFloat($(element).parent().siblings('.amount').find('input').val()).toFixed(4);
    var price = parseFloat($(element).parent().siblings('.unit-price').find('input').val()).toFixed(4);
    var discount = parseFloat( (amount*price)*($(element).val()/100) ).toFixed(2);

    var price_without_igv = (amount*price)-discount;

    $(element).siblings('.discount-before').val(discount);
    $(element).parent().siblings('.price-without-igv').find('input').val(price_without_igv);
    $(element).parent().siblings('.price-with-igv').find('input').val(price_without_igv);
  }

  /* Funciones de Calculo */

  function enableFieldsForIgv(element){
    if($(element).is(":checked")){
      var price_without_igv = $(element).parent().parent().siblings('.price-without-igv').find('input').val();
      $(element).parent().parent().siblings('.price-with-igv').find('input').val(parseFloat(price_without_igv*#{@igv}).toFixed(2));
      $(element).parent().parent().siblings('.quantity-igv').find('input').val(parseFloat(price_without_igv*#{@igv-1}).toFixed(2));
    } else {
      var price_without_igv = $(element).parent().parent().siblings('.price-without-igv').find('input').val();
      $(element).parent().parent().siblings('.price-with-igv').find('input').val(price_without_igv);
    }
  }

  function isNumber(evt) {
    evt = (evt) ? evt : window.event;
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (charCode > 31 && (charCode < 48 || charCode > 57) && charCode != 46) {
        return false;
    }
    return true;
  }

  function minmax(value, min, max){
    if(parseInt(value) < min || isNaN(value)) 
      return min; 
    else if(parseInt(value) > max) 
      return max; 
    else return value;
  }

  function set_id_modeling(obj, id_modeling){
    $current_tr_parent = $(obj).parent().parent().attr('id');
    id_modal_target = $(obj).attr('data-target');
    $id_generated = $current_tr_parent.split('-')[1];
    $(id_modal_target + '-hidden').val($id_generated);
  }

  function delete_item(code){
    $("#tr-" + code).remove();
  }

  function add_order_item(){
    if( $('#proveedor-select').val() ){

      supplier = $('#proveedor-select').val();
      data = { supplier: supplier, authenticity_token: "#{form_authenticity_token}" }
      load_items_delivery_order_ajax('#{display_orders_administration_provisions_path}', 'modalOrderItemsContent', data);
      $('#modalOrderItems').modal({
        backdropt: 'static',
        keyboard: false
      });

    } else {

      $.smallBox({
        title : "No se puede agregar Items de las Ordenes de Compra/Servicios",
        content : "No se tiene un proveedor definido.", 
        color : "#963b49",
        //timeout: 8000,
        icon : "fa fa-bell"
      });

    }
  }

  function show_me_the_details(){

    status_po = false;
    status_oos = false;

    var data_orders_po = new Array();
    var data_orders_oos = new Array();

    if( ( $('#list-orders_po tbody tr td.orders-checked').length > 0 ) && ( $('#list-orders_oos tbody tr td.orders-checked').length > 0 ) ){

      var index = 0;
      $('#list-orders_po tbody tr td.orders-checked .checkbox .order_check').each(function(){
        if( $(this).is(':checked') ){
          status_po = true
          data_orders_po[index] = $(this).val();
          index++;
        }
      });

      var jndex = 0;
      $('#list-orders_oos tbody tr td.orders-checked .checkbox .order_check').each(function(){
        if( $(this).is(':checked') ){
          status_oos = true
          data_orders_oos[jndex] = $(this).val();
          jndex++;
        }
      });

      if((status_po) && (status_oos)){

        data = { data_orders_po: data_orders_po, data_orders_oos: data_orders_oos, authenticity_token: "#{form_authenticity_token}" }
        load_items_delivery_order_ajax('#{display_details_orders_administration_provisions_path}', 'show_containter_details', data);

      } else { 

        e.preventDefault();
        $.smallBox({
          title: "Antes de continuar debes de haber seleccionado alguna Orden.",
          content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
          color: "#c46a69",
          iconSmall: "fa fa-times bounce animated",
          timeout: 4000
        });
      }

    } else {

      if( ( $('#list-orders_po tbody tr td.orders-checked').length > 0 ) ) {

        var index = 0;
        $('#list-orders_po tbody tr td.orders-checked .checkbox .order_check').each(function(){
          if( $(this).is(':checked') ){
            status_po = true
            data_orders_po[index] = $(this).val();
            index++;
          }
        });

        if(status_po){

          data = { data_orders_po: data_orders_po, authenticity_token: "#{form_authenticity_token}" }
          load_items_delivery_order_ajax('#{display_details_orders_administration_provisions_path}', 'show_containter_details', data);

        } else { 

          e.preventDefault();
          $.smallBox({
            title: "Antes de continuar debes de haber seleccionado alguna Orden.",
            content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
            color: "#c46a69",
            iconSmall: "fa fa-times bounce animated",
            timeout: 4000
          });
        }

      } else {

        if( ( $('#list-orders_oos tbody tr td.orders-checked').length > 0 ) ) {

          var jndex = 0;
          $('#list-orders_oos tbody tr td.orders-checked .checkbox .order_check').each(function(){
            if( $(this).is(':checked') ){
              status_oos = true
              data_orders_oos[jndex] = $(this).val();
              jndex++;
            }
          });

          if(status_oos){

            data = { data_orders_oos: data_orders_oos, authenticity_token: "#{form_authenticity_token}" }
            load_items_delivery_order_ajax('#{display_details_orders_administration_provisions_path}', 'show_containter_details', data);

          } else { 

            e.preventDefault();
            $.smallBox({
              title: "Antes de continuar debes de haber seleccionado alguna Orden.",
              content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
              color: "#c46a69",
              iconSmall: "fa fa-times bounce animated",
              timeout: 4000
            });
          }

        } else {

          e.preventDefault();
          $.smallBox({
            title: "Antes de continuar debes de haber seleccionado alguna Orden.",
            content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
            color: "#c46a69",
            iconSmall: "fa fa-times bounce animated",
            timeout: 4000
          });

        }

      }

    }

  }

  function put_the_details(){

    var data_orders_detail = new Array();
    var status_detail = false;

    if($('#list-orders-details tbody tr td.orders-checked').length > 0){

      var index = 0;
      $('#list-orders-details tbody tr td.orders-checked .checkbox .order_check').each(function(){
        if( $(this).is(':checked') ){
          status_detail = true;
          data_orders_detail[index] = $(this).val();
          index++;
        }
      });

      if(status_detail){
        data = { ids_orders_details: data_orders_detail, authenticity_token: "#{form_authenticity_token}", type_of_order: $('#type_of_order_name').val() };
        append_url_ajax('#{puts_details_in_provision_administration_provisions_path}', 'provisions_direct_items_table', data, null, 'POST');

        $('select.account_accountant').select2();

        $.smallBox({
          title: "Ahora puedes completar la información de la provisión.",
          content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
          color: "#5F895F",
          iconSmall: "fa fa-check bounce animated",
          timeout: 4000
        });

      } else {

        e.preventDefault();
        $.smallBox({
          title: "Antes de continuar debes de haber seleccionado alguna Orden.",
          content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
          color: "#c46a69",
          iconSmall: "fa fa-times bounce animated",
          timeout: 4000
        });
      }

    } else {

      e.preventDefault();
      $.smallBox({
        title: "El proveedor seleccionado no tiene orden alguna asignada.",
        content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
        color: "#c46a69",
        iconSmall: "fa fa-times bounce animated",
        timeout: 4000
      });

    }

  }

  /* For items from Orders */

  function calculatePrice_from_orders(element){
    var amount = parseInt($(element).val());
    var igv = parseFloat($(element).parent().siblings('.current-igv').find('input').val());
    var unit_price = parseFloat($(element).parent().siblings('.unit-price').find('input').val());
    var discount_before = $(element).parent().siblings('.discount-before').find('input');
    var discount_after = $(element).parent().siblings('.discount-after').find('input');
    var perception = $(element).parent().siblings('.perception').find('input');

    var total_dis_bes = 0;
    var total_dis_bep = 0;
    discount_before.each(function(){
      if($(this).attr('class')=="discount_before-item-soles"){
        total_dis_bes+=parseFloat($(this).val()).toFixed(2);
      }else{
        if($(this).attr('class')=="discount_before-item-percent"){
          total_dis_bep+=parseFloat((amount*unit_price*parseFloat($(this).val()))).toFixed(2);
        }
      }
    });
    var sdb = (total_dis_bes + total_dis_bep).toFixed(2);
    var a =(1+igv).toFixed(2)
    var total_price = (((amount * unit_price) - sdb)).toFixed(2);
    $(element).parent().siblings('.price-without-igv').find('input').val(total_price);
    $(element).parent().siblings('.discount-after').children('#db').find('input').val(sdb);

    
    var total_dis_afs = 0;
    var total_dis_afp = 0;
    /*
    discount_after.each(function(){
      if($(this).attr('class')=="discount_after-item-soles"){
        total_dis_afs+=parseFloat($(this).val());
      }else{
        if($(this).attr('class')=="discount_after-item-percent"){
          total_dis_afp+=parseFloat((total_price*parseFloat($(this).val())));
        }
      }
    });
    */
    var sda = (total_dis_afs + total_dis_afp).toFixed(2);
    var per_am=0;
    /*
    var net_total_price = parseFloat(total_price) - sda
    perception.each(function(){
      if($(this).attr('class')=="perception-soles"){
        per_am=parseFloat($(this).val()).toFixed(2);
      }else{
        if($(this).attr('class')=="perception-percent"){
          per_am=parseFloat(total_price*parseFloat($(this).val())).toFixed(2);
        }
      }
    });
    */
    $(element).parent().siblings('.quantity-igv').find('input').val(parseFloat(((amount * unit_price) - sdb)*igv).toFixed(2));
    var net_total_price = (((amount * unit_price) - sdb)*(a)).toFixed(2);
    $(element).parent().siblings('.discount-after').children('#da').find('input').val(sda*-1);
    $(element).parent().siblings('.unit-price-igv').find('input').val(parseFloat(net_total_price).toFixed(2));
    /*$(element).parent().siblings('.perception').children('#per').find('input').val(per_am);*/
  }

  function calculate_amounts(){
    var price_without_igv = 0;
    var igv = 0;
    var price_with_igv = 0;

    $('#provisions_direct_items_table tr td.price-without-igv input').each(function(i, v){
      price_without_igv = parseFloat($(v).val()) + parseFloat(price_without_igv);
    });

    $('#provisions_direct_items_table tr td.quantity-igv input').each(function(i, v){
      igv = parseFloat($(v).val()) + parseFloat(igv);
    });

    $('#provisions_direct_items_table tr td.unit-price-igv input').each(function(i, v){
      price_with_igv = parseFloat($(v).val()) + parseFloat(price_with_igv);
    });

    $('#stp_total_wt_igv').html('S/. ' + parseFloat(price_without_igv).toFixed(2));
    $('#stp_total_igv').html('S/. ' + parseFloat(igv).toFixed(2));
    $('#stp_total_w_igv').html('S/. ' + parseFloat(price_with_igv).toFixed(2));
  }