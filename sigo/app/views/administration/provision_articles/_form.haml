#wid-id-0.jarviswidget{"data-widget-colorbutton" => "false", "data-widget-editbutton" => "false"}
  %header
    %span.widget-icon
      %i.fa.fa-pencil-square-o.fa-fw 
    %h2
      %strong Editar Provision
  %div
    .jarviswidget-editbox
    .widget-body 
      = simple_form_for([:administration, @provision], html: {class: 'form-horizontal', novalidate: 'novalidate', autocomplete: 'off' }) do |f|
        .col-sm-12
          %fieldset{ :style => 'margin-top: 20px;' }
            = hidden_field_tag 'provision[cost_center_id]', @cost_center, class: 'form-control', id: 'cost-center-selected'
            .col-md-4
              .form-group
                %label.col-md-4.control-label Proveedores
                .col-md-8
                  %input#proveedor-select.form-control{"name" =>"provision[entity_id]", 'type' => 'hidden', 'style' => 'width:100%;padding: 0;border: none;', 'value' => "#{@provision.entity_id}"}

            .col-md-4
              .form-group
                %label.col-md-4.control-label Tipo Documento
                .col-md-8
                  %select.select2.form-control{:name => 'provision[document_provision_id]', :style => 'width:100%;padding: 0;border: none;'}
                    - @documentProvisions.each do |x|
                      - if @provision.document_provision_id == x.id
                        %option{:value => "#{x.id}", :selected => true}
                          = x.name
                      - else
                        %option{:value => "#{x.id}"}
                          = x.name
            .col-md-4
              .form-group
                %label.col-md-4.control-label Numero de Documento
                .col-md-8
                  .input-group
                    = f.input :number_document_provision, :input_html => {:class => 'form-control'}, label: false
                    %span.input-group-addon
                      %i.fa.fa-calendar

            .col-md-4
              .form-group
                %label.col-md-4.control-label Fecha
                .col-md-8
                  .input-group
                    = f.input :accounting_date, as: :string, :input_html => {:class => 'form-control', :type => "date"}, label: false
                    %span.input-group-addon
                      %i.fa.fa-calendar
            .col-md-4
              .form-group
                %label.col-md-4.control-label Serie
                .col-md-8
                  .input-group
                    = f.input :series, placeholder: "Serie", :input_html => {:class => 'form-control'}, label: false
                    %span.input-group-addon
                      %i.fa.fa-money

            .col-md-12
              .form-group
                %label.col-md-2.control-label Glosa
                .col-md-10
                  .input-group
                    = f.input :description, placeholder: "Glosa", :input_html => {:class => 'form-control'}, label: false
                    %span.input-group-addon
                      %i.fa.fa-align-justify
          %fieldset
            %legend Elección del Insumo
            .row
              .col-lg-12.col-md-12
                %label.col-lg-1.control-label{:for => "article_id"} Insumos
                .col-lg-6.col-md-6
                  %input#article-select.select2.bigdrop.select2-offscreen.form-control{'name' => 'article_id', 'type' => 'hidden', 'style' => 'width:100%;padding: 0;border: none;'}

                .col-lg-1.col-md-1
                  = text_field_tag 'amount', nil, class: 'form-control', id: 'article-amount', value: '1'

                .col-lg-2.col-md-2{ :style => "margin-right: 30px;" }
                  %div
                    %a(href="javascript:add_article_item();" id="btn-add-article" class="btn btn-success" role="button")
                      Agregar Insumo

                .col-lg-2.col-md-2
                  %div
                    %a#btn-add-orders(href="javascript:add_order_item();" class="btn btn-info" role="button")
                      Agregar Insumo de Ordenes

          .row{:style=>"overflow-x:scroll"}
            %fieldset{ :style => "margin-top: 20px; margin-bottom: 20px;" }
              %table.table.table-condensed.table-bordered.table-striped.table-hover.has-tickbox.smart-form#summary-direct-provisions{:style => "font-size: 12px;", 'aria-describedby' => "data-table_info"}
                %thead
                  %tr
                    %th Nombre del Artículo
                    %th Unidad de Medida
                    %th Cuenta Contable
                    %th Sector
                    %th Fase
                    %th Cantidad
                    %th Precio Unitario
                    %th Total antes de IGV
                    %th ¿Aplica IGV?
                    %th Total después de IGV
                    %th Operaciones Adicionales
                    %th Descripción
                    %th Acción
                %tbody{:id => "provisions_direct_items_table"}
                  - array_values = Array.new
                  - @provision.provision_direct_purchase_details.each do |pod|
                    - array_values << @reg_n.to_s
                    %tr{id: "tr-" + @reg_n.to_s}
                      %td{:style => "display:none", :class => "provision_article-id"}
                        = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][article_id]', pod.article_id
                        = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][id]', pod.id.to_i rescue nil
                      %td= Article.find(pod.article_id).name.to_s
                      %td= Article.find(pod.article_id).unit_of_measurement.symbol.to_s
                      %td.account-accountant
                        %select.form-control{:name =>"provision[provision_direct_purchase_details_attributes][" + @reg_n.to_s + "][account_accountant_id]", :required => true, title:'No puede dejar este campo vacio'}
                          %option{:value => nil, :disabled => true} Seleccionar cuenta contable
                          - @account_accountants.each do |account_accountant|
                            %option{:value => "#{account_accountant.id}", :selected=>"#{account_accountant.id}"=="#{pod.account_accountant_id}"}
                              = '(' + account_accountant.code + ') ' + account_accountant.name
                      %td.sector
                        %select.form-control{:name =>"provision[provision_direct_purchase_details_attributes][#{@reg_n.to_s}][sector_id]", :required => true, title:'No puede dejar este campo vacio'}
                          %option{:value => nil, :disabled => true} Seleccionar Sector
                          - @sectors.each do |sector|
                            %optgroup{:label => "#{sector.name}"}
                              -Sector.getSubSectors(sector.code).each do |subsector|
                                %option{:value => "#{subsector.id}", :selected=>"#{subsector.id}"=="#{pod.sector_id}"}
                                  = subsector.name
                      %td.phase
                        %select.form-control{:name =>"provision[provision_direct_purchase_details_attributes][#{@reg_n.to_s}][phase_id]", :required => true, title:'No puede dejar este campo vacio'}
                          %option{:value => nil, :disabled => true} Seleccionar Fase
                          - @phases.each do |phase|
                            %option{:value => "#{phase.id}", :selected=>"#{phase.id}"=="#{pod.phase_id}"}
                              = phase.code + " " + phase.name

                      %td.amount
                        = text_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][amount]', pod.amount , class: "form-control unit-price-igv", onfocusout: "calculatePrice(this);", onkeypress: "return isNumber(event);"

                      %td.unit-price
                        = text_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][price]', pod.price, class: "form-control unit-price-item", onfocusout: "calculatePriceWithoutIgv(this);", onkeypress: "return isNumber(event);"

                      %td.discount-before{:style => "display:none", :class => "provision_discount-before"}
                        = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][discount_before]', pod.discount_before, class: "discount_before-item"

                      %td.price-without-igv
                        = text_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][unit_price_before_igv]', pod.unit_price_before_igv, class: "form-control unit-price-without-igv", :readonly => true

                      %td.check-igv
                        %label.checkbox
                          = check_box_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][igv]', pod.igv, { class: 'provision_direct_igv', onchange: "enableFieldsForIgv(this);" }
                          %i

                      %td.quantity-igv{:style => "display:none", :class => "provision_quantity-igv"}
                        = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][quantity_igv]',pod.quantity_igv, class: "igv-item"

                      %td.price-with-igv
                        = text_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][unit_price_igv]', pod.unit_price_igv, class: "form-control unit-price-igv", :readonly => true

                      %td.discount-after{:style => "display:none", :class => "provision_discount-after"}
                        = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][discount_after]', pod.discount_after, class: "discount_after-item"

                      %td{:style => 'text-align: center'}
                        %a.btn.btn-info.btn-xs{'data-toggle' => 'modal', 'href' => "#", 'data-target' => "#modal-provision-#{@reg_n.to_s}", 'onclick' => "set_id_modeling(this, #{@reg_n.to_s})"}
                          %strong
                            %i.fa.fa-superscript

                      %td.description
                        = text_area_tag 'provision[provision_direct_purchase_details_attributes][' + @reg_n.to_s + '][description]', pod.description, class: "form-control description"   
                      %td.delete-item
                    - @reg_n += 1


                - i = 0
                - @provision.provision_direct_purchase_details.each do |pod|
                  .modal.fade{"id" => "modal-provision-#{array_values[i]}", "aria-hidden" => "true", "aria-labelledby" => "modalLoadingLabel", role: "dialog", tabindex: "-1"}
                    .modal-dialog
                      .modal-content
                        .modal-header
                          %button{"type" => "button", "class" => "close", "data-dismiss" => "modal", "aria-hidden" => "true"} ×
                          %h4.modal-title Operaciones Adicionales
                        .modal-body
                          .smart-form
                            %fieldset
                              = hidden_field_tag 'id_modal', "#{array_values[i]}", :id => "modal-provision-#{array_values[i]}-hidden"
                              .row
                                %label.label.col.col-2{for: "extra_calculation_id"} Concepto
                                .col.col-10
                                  %label.input
                                    %select.form-control{:name =>"extra_calculation_id", :id => "modal-provision-#{array_values[i]}-select-calc"}
                                      - @extra_calculations.each do |calculation|
                                        %option{:value => "#{calculation.id}"}
                                          = calculation.concept

                              .row
                                %label.label.col.col-2{for: "type"} Tipo
                                .col.col-10
                                  %label.input
                                    %select.form-control{:name =>"type", :id => "modal-provision-#{array_values[i]}-select-type"}
                                      %option{:value => "percent"}
                                        (%)
                                      %option{:value => "soles"}
                                        (S/.)

                              .row
                                %label.label.col.col-2{for: "value"} Valor
                                .col.col-10
                                  %label.input
                                    %i.icon-append.fa.fa-money
                                    = text_field_tag 'value', nil, id: "modal-provision-#{array_values[i]}-input-value", onkeypress: "return isNumber(event);"

                              .row
                                %label.label.col.col-2{for: "apply"} Aplicar
                                .col.col-10
                                  %label.input
                                    %select.form-control{:name =>"apply", :id => "modal-provision-#{array_values[i]}-select-apply"}
                                      %option{:value => "before"}
                                        Antes de IGV
                                      %option{:value => "after"}
                                        Después de IGV

                              .row
                                %label.label.col.col-2{for: "operation"} +/-
                                .col.col-10
                                  %label.input
                                    %select.form-control{:name =>"operation", :id => "modal-provision-#{array_values[i]}-select-operation"}
                                      %option{:value => "sum"}
                                        = '+'
                                      %option{:value => "minius"}
                                        = '-'

                            %fieldset
                              %h3 Listado de Operaciones
                              %br
                              .row
                                %section.col.col-md-12{'id' => "modal-provision-#{array_values[i]}-section"}
                                  - pod.provision_direct_extra_calculations.each do |order_operation|
                                    - @reg_n_2 = ((Time.now.to_f)*100).to_i
                                    .col.col-md-12
                                      .col.col-md-1
                                        %i.fa.fa-check
                                      .col.col-md-3
                                        = order_operation.extra_calculation.concept rescue 'Concepto errado'
                                        = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + array_values[i].to_s + '][provision_direct_extra_calculations_attributes][' + @reg_n_2.to_s + '][extra_calculation_id]', order_operation.extra_calculation_id rescue nil
                                        = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + array_values[i].to_s + '][provision_direct_extra_calculations_attributes][' + @reg_n_2.to_s + '][id]', order_operation.id
                                      = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + array_values[i].to_s + '][provision_direct_extra_calculations_attributes][' + @reg_n_2.to_s + '][type]', order_operation.type rescue nil
                                      .col.col-md-2
                                        - if order_operation.type == 'soles'
                                          = order_operation.value.to_s + '(S/.)'
                                        - elsif order_operation.type == 'percent'
                                          = order_operation.value.to_s + '(%)'
                                        = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + array_values[i].to_s + '][provision_direct_extra_calculations_attributes][' + @reg_n_2.to_s + '][value]', order_operation.value rescue nil
                                      .col.col-md-3
                                        - if order_operation.apply == 'before'
                                          Antes de IGV
                                        - elsif order_operation.apply == 'after'
                                          Después de IGV
                                        = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + array_values[i].to_s + '][provision_direct_extra_calculations_attributes][' + @reg_n_2.to_s + '][apply]', order_operation.apply rescue nil
                                      .col.col-md-3
                                        = check_box_tag 'provision[provision_direct_purchase_details_attributes][' + array_values[i].to_s + '][provision_direct_extra_calculations_attributes][' + @reg_n_2.to_s + '][_destroy]'
                                        %label Eliminar
                                      = hidden_field_tag 'provision[provision_direct_purchase_details_attributes][' + array_values[i].to_s + '][provision_direct_extra_calculations_attributes][' + @reg_n_2.to_s + '][operation]', order_operation.operation rescue nil
                            %footer
                              %button{:type => "button", :class => "btn btn-primary", :onclick => "add_extra_operation(this)", :rel => "modal-provision-#{array_values[i]}"} Agregar Operación
                  - i += 1

        .col-sm-12.col-md-12{:style => "margin-bottom: 20px;"}
          .row
            %button.btn.btn-primary{type: "submit"}
              %i.fa.fa-save
                Guardar

#modalOrderItems.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "modalDeliveryItemsLabel", role: "dialog", tabindex: "-1"}
  .modal-dialog{ :style => 'width: 60%;' }
    .modal-content
      .modal-body#modalOrderItemsContent

:javascript
  
  $(document).ready(function(){ 
    $('select').select2();
    $('#proveedor-select').select2({
      placeholder: "Buscar proveedor...",
      minimumInputLength: 3,
      ajax: {
        url: "#{display_proveedor_administration_provision_articles_path}",
        dataType: 'json',
        type: 'POST',
        quietMillis: 100,
        data: function(term, page){
          return {
            q: term,
            page: page,
            authenticity_token: "#{form_authenticity_token}"
          };
        },
        results: function(data, page){
          return {results: data.articles};
        }
      },
      initSelection: function(element, callback) {
        var id=$(element).val();
        if (id != "") {
          $.ajax("#{display_proveedor_administration_provision_articles_path}", {
            type: 'POST',
            data: {
              element: id,
              authenticity_token: "#{form_authenticity_token}"
            },
            dataType: "json"
          }).done(function(data) { 
            callback(data.articles[0]);
          });
        }
      },
      formatResult: function(node){ return '<div>' + node.code + ' - ' + node.name +'</div>' },
      formatSelection: function(node){ return (node.code + ' - ' + node.name ) },
      escapeMarkup: function (m) { return m; }
    });
        
    $('#article-select').select2({
      placeholder: "Buscar Insumos...",
      minimumInputLength: 3,
      ajax: {
        url: "#{display_articles_administration_provision_articles_path}",
        dataType: 'json',
        type: 'POST',
        quietMillis: 100,
        data: function(term, page){
          return {
            q: term,
            page: page,
            authenticity_token: "#{form_authenticity_token}"
          };
        },
        results: function(data, page){
          return {results: data.articles};
        }
      },
      formatResult: function(node){ return '<div>' + node.code + ' - ' + node.name + ' - ' + node.symbol + '</div>' },
      formatSelection: function(node){ return (node.code + ' - ' + node.name + ' - ' + node.symbol) },
      escapeMarkup: function (m) { return m; }
    });

    $('#new_provision').ajaxForm({
      beforeSubmit: function() {
        $('#new_provision').validate({
          // Rules for form validation
          rules : {
            'provision[entity_id]' : {
              required : true
            },
            'provision[document_provision_id]' : {
              required : true,
            },
            'provision[number_document_provision]' : {
              required : true,
            },
            'provision[accounting_date]' : {
              required : true
            },
            'provision[series]' : {
              required : true
            }
          },

          // Messages for form validation
          messages : {
            'provision[entity_id]' : {
              required : 'El proveedor es obligatorio.'
            },
            'deliveryOrder[document_provision_id]' : {
              required : 'El tipo de Documento es obligatorio.',
            },
            'provision[number_document_provision]' : {
              required : 'El numero del Documento es obligatorio.'
            },
            'provision[accounting_date]' : {
              required : 'La fecha es requerida.'
            },
            'provision[series]' : {
              required : 'El número de serie es requerida.'
            }
          },
          highlight: function (element) {
            $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
          },
          unhighlight: function (element) {
            $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
          },
          errorElement: 'span',
          errorClass: 'help-block',
          errorPlacement: function (error, element) {
            if (element.parent('.input-group').length) {
              error.insertAfter(element.parent());
            } else {
              error.insertAfter(element);
            }
          }
        });
        return $('#new_provision').valid();
      },
      target: '#content'
    });

    $('form[id^="edit_"]').ajaxForm({
      beforeSubmit: function() {
        $('form[id^="edit_"]').validate({
          // Rules for form validation
          rules : {
            'provision[entity_id]' : {
              required : true
            },
            'provision[document_provision_id]' : {
              required : true,
            },
            'provision[number_document_provision]' : {
              required : true,
            },
            'provision[accounting_date]' : {
              required : true
            },
            'provision[series]' : {
              required : true
            }
          },

          // Messages for form validation
          messages : {
            'provision[entity_id]' : {
              required : 'El proveedor es obligatorio.'
            },
            'deliveryOrder[document_provision_id]' : {
              required : 'El tipo de Documento es obligatorio.',
            },
            'provision[number_document_provision]' : {
              required : 'El numero del Documento es obligatorio.'
            },
            'provision[accounting_date]' : {
              required : 'La fecha es requerida.'
            },
            'provision[series]' : {
              required : 'El número de serie es requerida.'
            }
          },
          highlight: function (element) {
            $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
          },
          unhighlight: function (element) {
            $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
          },
          errorElement: 'span',
          errorClass: 'help-block',
          errorPlacement: function (error, element) {
            if (element.parent('.input-group').length) {
              error.insertAfter(element.parent());
            } else {
              error.insertAfter(element);
            }
          }
        });

        return $('form[id^="edit_"]').valid();
      },
      target: '#content'
    });
  });

  function add_article_item(){

    var article_id = $("#article-select").val();
    str_item = {authenticity_token: "#{form_authenticity_token}", article_id: $("#article-select").val(), amount: $("#article-amount").val()};

    append_url_ajax('#{puts_details_in_provision_administration_provision_articles_path}', 'provisions_direct_items_table', str_item, 0, 'POST');
  }

  function calculatePriceWithoutIgv(element){
    var amount = parseInt($(element).parent().siblings('.amount').find('input').val());

    var price_without_igv = parseFloat($(element).val() * amount).toFixed(2);

    $(element).parent().siblings('.price-without-igv').find('input').val(price_without_igv);
    $(element).parent().siblings('.price-with-igv').find('input').val(price_without_igv);
  }

  function calculatePrice(element){
    var amount = parseInt($(element).val());

    var price_without_igv = parseFloat($(element).parent().siblings('.unit-price').find('input').val() * amount).toFixed(2);

    $(element).parent().siblings('.price-without-igv').find('input').val(price_without_igv);
    $(element).parent().siblings('.price-with-igv').find('input').val(price_without_igv);
  }

  function enableFieldsForIgv(element){
    if($(element).is(":checked")){
      var price_without_igv = $(element).parent().parent().siblings('.price-without-igv').find('input').val();
      $(element).parent().parent().siblings('.price-with-igv').find('input').val(parseFloat(price_without_igv*#{@igv}).toFixed(2));
    } else {
      var price_without_igv = $(element).parent().parent().siblings('.price-without-igv').find('input').val();
      $(element).parent().parent().siblings('.price-with-igv').find('input').val(price_without_igv);
    }
  }

  function isNumber(evt) {
    evt = (evt) ? evt : window.event;
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (charCode > 31 && (charCode < 48 || charCode > 57) && charCode != 46) {
        return false;
    }
    return true;
  }

  function set_id_modeling(obj, id_modeling){
    $current_tr_parent = $(obj).parent().parent().attr('id');
    id_modal_target = $(obj).attr('data-target');
    $id_generated = $current_tr_parent.split('-')[1];
    $(id_modal_target + '-hidden').val($id_generated);
  }

  function delete_item(code){
    $("#tr-" + code).remove();
  }

  function add_extra_operation(obj){

    var id_content = $(obj).attr('rel') + '-section';

    var concept = '#' + $(obj).attr('rel') + '-select-calc';
    var type = '#' + $(obj).attr('rel') + '-select-type';
    var name_concept = '#' + $(obj).attr('rel') + '-select-calc option:selected';
    var name_type = '#' + $(obj).attr('rel') + '-select-type option:selected';

    var value = '#' + $(obj).attr('rel') + '-input-value';

    var apply = '#' + $(obj).attr('rel') + '-select-apply';
    var operation = '#' + $(obj).attr('rel') + '-select-operation';
    var name_apply = '#' + $(obj).attr('rel') + '-select-apply option:selected';

    var reg_n = '#' + $(obj).attr('rel') + '-hidden';

    var str_data = { concept: $(concept).val(), type: $(type).val(), value: $(value).val(), apply: $(apply).val(), operation: $(operation).val(), name_concept: $(name_concept).text(), name_type: $(name_type).text(), name_apply: $(name_apply).text(), reg_n: $(reg_n).val() };

    /* Data for Calculate */
    amount_bruto = $('#tr-' + $(reg_n).val() + ' td.amount input').val()*$('#tr-' + $(reg_n).val() + ' td.unit-price input').val();

    /* Referencial Data */
    path_jquery_before = '#tr-' + $(reg_n).val() + ' td.price-without-igv input';
    path_jquery_after = '#tr-' + $(reg_n).val() + ' td.price-with-igv input';
    path_jquery_igv = '#tr-' + $(reg_n).val() + ' td.check-igv .checkbox input';
    /* Amounts */
    path_jquery_discount_before = '#tr-' + $(reg_n).val() + ' td.discount-before input';
    path_jquery_discount_after = '#tr-' + $(reg_n).val() + ' td.discount-after input';
    path_jquery_discount_igv = '#tr-' + $(reg_n).val() + ' td.discount-igv input';

    
    if($(concept).val()!='' && $(type).val()!='' && $(value).val()!='' && $(apply).val()!='' && $(operation).val()!='' && $(name_concept).text()!='' && $(name_type).text()!='' && $(name_apply).text()!='' && $(reg_n).val()!='' ){
      if($(path_jquery_before).val() != ''){

        ancient_value_before = parseFloat($(path_jquery_before).val());
        ancient_value_after = parseFloat($(path_jquery_after).val());

        if( $(apply).val() == 'before' ){

          if( $(operation).val() == 'sum' ){
            if( $(type).val() == 'soles' ){
              value_before = $(path_jquery_discount_before).val() + parseFloat($(value).val());
              $(path_jquery_discount_before).val(value_before);
            } else {
              value_before = $(path_jquery_discount_before).val() + parseFloat((amount_bruto*($(value).val()/100)));
              $(path_jquery_discount_before).val(value_before);
            }
          } else {
            if( $(type).val() == 'soles' ){
              value_before = $(path_jquery_discount_before).val() - parseFloat($(value).val());
              $(path_jquery_discount_before).val(value_before);
              console.log($(path_jquery_discount_before).val());
            } else {
              value_before = $(path_jquery_discount_before).val() - parseFloat((amount_bruto*($(value).val()/100)));
              $(path_jquery_discount_before).val(value_before);
              console.log($(path_jquery_discount_before).val());
            }
          }

          if($(path_jquery_igv).is(":checked")){
            $(path_jquery_before).val( parseFloat(amount_bruto) + parseFloat($(path_jquery_discount_before).val()) );
            $(path_jquery_discount_igv).val( (parseFloat(amount_bruto) + parseFloat($(path_jquery_discount_before).val())) * (1 - parseFloat("#{@igv}")) );
            $(path_jquery_after).val( (parseFloat(amount_bruto) + parseFloat($(path_jquery_discount_before).val())) * parseFloat("#{@igv}") );
          } else {
            $(path_jquery_before).val( parseFloat(amount_bruto) + parseFloat($(path_jquery_discount_before).val()) );
            $(path_jquery_after).val( parseFloat(amount_bruto) + parseFloat($(path_jquery_discount_before).val()) );
            $(path_jquery_discount_igv).val(0);
          }

        } else {

          if( $(operation).val() == 'sum' ){
            if( $(type).val() == 'soles' ){
              value_after = $(path_jquery_discount_after).val() + parseFloat($(value).val()).toFixed(2);
              $(path_jquery_discount_after).val(value_after);
            } else {
              value_after = $(path_jquery_discount_after).val() + parseFloat($(path_jquery_after).val()*($(value).val()/100)).toFixed(2);
              $(path_jquery_discount_after).val(value_after);
            }
          } else {
            if( $(type).val() == 'soles' ){
              value_after = $(path_jquery_discount_after).val() - parseFloat($(value).val()).toFixed(2);
              $(path_jquery_discount_after).val(value_after);
            } else {
              value_after = $(path_jquery_discount_after).val() - parseFloat($(path_jquery_after).val()*($(value).val()/100)).toFixed(2);
              $(path_jquery_discount_after).val(value_after);
            }
          }

        }
        append_url_ajax('#{add_more_row_form_extra_op_administration_provision_articles_path}', id_content, str_data, 0, 'POST');

      } else {

        alert('No se ha calculado el Precio antes de IGV.');

      }
    }else{
      alert('Llene todos los campos antes de agregar una operación.');    
    }

  }

  function add_order_item(){
    if( $('#proveedor-select').val() ){

      supplier = $('#proveedor-select').val();
      data = { supplier: supplier, authenticity_token: "#{form_authenticity_token}" }
      load_items_delivery_order_ajax('#{display_orders_administration_provisions_path}', 'modalOrderItemsContent', data);
      $('#modalOrderItems').modal({
        backdropt: 'static',
        keyboard: false
      });

    } else {

      $.smallBox({
        title : "No se puede agregar Items de las Ordenes de Compra/Servicios",
        content : "No se tiene un proveedor definido.", 
        color : "#963b49",
        //timeout: 8000,
        icon : "fa fa-bell"
      });

    }
  }

  function show_me_the_details(){

    status_po = false;
    status_oos = false;

    var data_orders_po = new Array();
    var data_orders_oos = new Array();

    if( ( $('#list-orders_po tbody tr td.orders-checked').length > 0 ) && ( $('#list-orders_oos tbody tr td.orders-checked').length > 0 ) ){

      var index = 0;
      $('#list-orders_po tbody tr td.orders-checked .checkbox .order_check').each(function(){
        if( $(this).is(':checked') ){
          status_po = true
          data_orders_po[index] = $(this).val();
          index++;
        }
      });

      var jndex = 0;
      $('#list-orders_oos tbody tr td.orders-checked .checkbox .order_check').each(function(){
        if( $(this).is(':checked') ){
          status_oos = true
          data_orders_oos[jndex] = $(this).val();
          jndex++;
        }
      });

      if((status_po) && (status_oos)){

        data = { data_orders_po: data_orders_po, data_orders_oos: data_orders_oos, authenticity_token: "#{form_authenticity_token}" }
        load_items_delivery_order_ajax('#{display_details_orders_administration_provisions_path}', 'show_containter_details', data);

      } else { 

        e.preventDefault();
        $.smallBox({
          title: "Antes de continuar debes de haber seleccionado alguna Orden.",
          content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
          color: "#c46a69",
          iconSmall: "fa fa-times bounce animated",
          timeout: 4000
        });
      }

    } else {

      if( ( $('#list-orders_po tbody tr td.orders-checked').length > 0 ) ) {

        var index = 0;
        $('#list-orders_po tbody tr td.orders-checked .checkbox .order_check').each(function(){
          if( $(this).is(':checked') ){
            status_po = true
            data_orders_po[index] = $(this).val();
            index++;
          }
        });

        if(status_po){

          data = { data_orders_po: data_orders_po, authenticity_token: "#{form_authenticity_token}" }
          load_items_delivery_order_ajax('#{display_details_orders_administration_provisions_path}', 'show_containter_details', data);

        } else { 

          e.preventDefault();
          $.smallBox({
            title: "Antes de continuar debes de haber seleccionado alguna Orden.",
            content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
            color: "#c46a69",
            iconSmall: "fa fa-times bounce animated",
            timeout: 4000
          });
        }

      } else {

        if( ( $('#list-orders_oos tbody tr td.orders-checked').length > 0 ) ) {

          var jndex = 0;
          $('#list-orders_oos tbody tr td.orders-checked .checkbox .order_check').each(function(){
            if( $(this).is(':checked') ){
              status_oos = true
              data_orders_oos[jndex] = $(this).val();
              jndex++;
            }
          });

          if(status_oos){

            data = { data_orders_oos: data_orders_oos, authenticity_token: "#{form_authenticity_token}" }
            load_items_delivery_order_ajax('#{display_details_orders_administration_provisions_path}', 'show_containter_details', data);

          } else { 

            e.preventDefault();
            $.smallBox({
              title: "Antes de continuar debes de haber seleccionado alguna Orden.",
              content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
              color: "#c46a69",
              iconSmall: "fa fa-times bounce animated",
              timeout: 4000
            });
          }

        } else {

          e.preventDefault();
          $.smallBox({
            title: "Antes de continuar debes de haber seleccionado alguna Orden.",
            content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
            color: "#c46a69",
            iconSmall: "fa fa-times bounce animated",
            timeout: 4000
          });

        }

      }

    }

  }

  function put_the_details(){

    var data_orders_detail = new Array();
    var status_detail = false;

    if($('#list-orders-details tbody tr td.orders-checked').length > 0){

      var index = 0;
      $('#list-orders-details tbody tr td.orders-checked .checkbox .order_check').each(function(){
        if( $(this).is(':checked') ){
          status_detail = true;
          data_orders_detail[index] = $(this).val();
          index++;
        }
      });

      if(status_detail){
        data = { ids_orders_details: data_orders_detail, authenticity_token: "#{form_authenticity_token}", type_of_order: $('#type_of_order_name').val() };
        load_items_delivery_order_ajax('#{puts_details_in_provision_administration_provisions_path}', 'provisions_direct_items_table', data);

        $.smallBox({
          title: "Ahora puedes completar la información de la provisión.",
          content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
          color: "#5F895F",
          iconSmall: "fa fa-check bounce animated",
          timeout: 4000
        });

      } else {

        e.preventDefault();
        $.smallBox({
          title: "Antes de continuar debes de haber seleccionado alguna Orden.",
          content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
          color: "#c46a69",
          iconSmall: "fa fa-times bounce animated",
          timeout: 4000
        });
      }

    } else {

      e.preventDefault();
      $.smallBox({
        title: "El proveedor seleccionado no tiene orden alguna asignada.",
        content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
        color: "#c46a69",
        iconSmall: "fa fa-times bounce animated",
        timeout: 4000
      });

    }

  }