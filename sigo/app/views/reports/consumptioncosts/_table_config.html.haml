- if !@treeOrders.nil?
  .col-md-12
    %h4= @cost_center_str
    %h1{:style => 'text-align:center;'}
      = "COSTO POR CONSUMO PERIODO: " + @month

  .col-md-4
    %p
      %strong TIPO DE REPORTE: GENERAL

  .col-md-4
    %p
      %strong FILTRO: TODOS

  .col-md-12
    %table.table.table-bordered.table-hover{:style => 'background-color: #fff;'}
      %tr
        %th
        %th{:colspan => @array_order_actual.count, :style => 'text-align:center;'} 
          %strong ACTUAL
        -if @array_order_accum_before.count > 0
          %th{:colspan => @array_order_accum_before.count, :style => 'text-align:center;'} 
            %strong ACUM. ANTERIOR
        -if @array_order_accum.count > 0
          %th{:colspan => @array_order_accum.count, :style => 'text-align:center;'} 
            %strong ACUM. ACTUAL
        %th{:rowspan => "2", :style => 'text-align:center;'}
          %strong 
            COSTO AL
            %br>/
            TERMINO
        %th{:rowspan => "2", :style => 'text-align:center;'}
          %strong 
            COSTO AL
            %br>/
            TERMINO
            %br>/
            ANTERIOR
      %tr
        %td
          %strong DESCRIPCION      
        -if @array_order_actual.count > 0 
          -@array_order_actual.each do |aoa|
            -case aoa 
              -when 'programado'
                %td{:style => 'text-align:center;'}
                  %strong PROGRAMADO
              -when 'valorizado'
                %td{:style => 'text-align:center;'}
                  %strong VALORIZADO
              -when 'valor_ganado'
                %td{:style => 'text-align:center;'}
                  %strong VALOR GANADO
              -when 'real'
                %td{:style => 'text-align:center;'}
                  %strong COSTO REAL
              -when 'meta'
                %td{:style => 'text-align:center;'}
                  %strong META
        -if @array_order_accum_before.count > 0 
          -@array_order_accum_before.each do |aoab|
            -case aoab
              -when 'programado'
                %td{:style => 'text-align:center;'}
                  %strong PROGRAMADO
              -when 'valorizado'
                %td{:style => 'text-align:center;'}
                  %strong VALORIZADO
              -when 'valor_ganado'
                %td{:style => 'text-align:center;'}
                  %strong VALOR GANADO
              -when 'real'
                %td{:style => 'text-align:center;'}
                  %strong COSTO REAL
              -when 'meta'
                %td{:style => 'text-align:center;'}
                  %strong META
        -if @array_order_accum.count > 0
          -@array_order_accum.each do |aoa|
            -case aoa 
              -when 'programado'
                %td{:style => 'text-align:center;'}
                  %strong PROGRAMADO
              -when 'valorizado'
                %td{:style => 'text-align:center;'}
                  %strong VALORIZADO
              -when 'valor_ganado'
                %td{:style => 'text-align:center;'}
                  %strong VALOR GANADO
              -when 'real'
                %td{:style => 'text-align:center;'}
                  %strong COSTO REAL
              -when 'meta'
                %td{:style => 'text-align:center;'}
                  %strong META
      - arr = ["CD","GG","GS"]
      -i = 0
      -j = 0
      - @treeOrders.each do |tree_order|
        %tr
          %td
            %strong= tree_order.name.upcase
          - actual = ConsumptionCost.get_total_father(@for_acumulated_end_date,@cost_center_id,arr[i],@array_order_filters, @array_columns_delivered_sum)
          -actual.each do |accum|
            %td
              = accum.to_f.round(4).round(2)
          -acuum = ConsumptionCost.get_total_accum_father(@for_acumulated_end_date,@cost_center_id,arr[i],@array_order_filters, @array_columns_delivered_sum)
          -acuum.each do |accum|
            %td
              = accum.to_f.round(4).round(2)
          -accum_actual = [actual,acuum].transpose.map {|x| x.reduce(:+)}
          -accum_actual.each do |accum|
            %td
              = accum.to_f.round(4).round(2)
          -i+=1
          - tree_order.children.each do |first_node|
            %tr
              %td
                %span{:style => 'visibility:hidden'}
                  = '-'*2
                - if first_node.content.is_a? String
                  = first_node.content
                - else
                  = first_node.content.name.to_s
              - if !first_node.content.is_a?(String)
                -array_actual_values = Array.new
                -@array_order_actual.each do |aoa|
                  -case aoa 
                    -when 'programado'
                      %td
                        = first_node.content.programado.to_f.round(2)
                        -array_actual_values<<first_node.content.programado.to_f.round(2)
                    -when 'valorizado'
                      %td
                        = first_node.content.valorizado.to_f.round(2)
                        -array_actual_values<<first_node.content.valorizado.to_f.round(2)
                    -when 'valor_ganado'
                      %td
                        = first_node.content.valorGanado.to_f.round(2)
                        -array_actual_values<<first_node.content.valorGanado.to_f.round(2)
                    -when 'real'
                      %td
                        = first_node.content.real.to_f.round(2)
                        -array_actual_values<<first_node.content.real.to_f.round(2)
                    -when 'meta'
                      %td
                        = first_node.content.meta.to_f.round(2)
                        -array_actual_values<<first_node.content.meta.to_f.round(2)
                
                -if first_node.content.type == "objeto"
                  - accum = ConsumptionCost.get_the_acumulated(first_node.content.name.to_s[1..10],@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters,@array_columns_prev_delivered_sum)
                - elsif first_node.content.type == "nodo"
                  - accum = ConsumptionCost.get_accumulated_father(first_node.content.name.to_s,@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters, @array_columns_prev_delivered_sum)
                -if @array_order_accum_before.count > 0
                  - accum.each do |accum|
                    %td= accum.to_f.round(4).round(2)

                -if @array_order_accum.count > 0
                  - array_actual_values = [array_actual_values,accum].transpose.map {|x| x.reduce(:+)}
                  -array_actual_values.each do |accum|
                    %td
                      = accum.to_f.round(4).round(2)
                %td
                %td
            - if first_node.children.count > 0
              - first_node.children.each do |second_node|
                %tr
                  %td
                    %span{:style => 'visibility:hidden'}
                      = '-'*5
                    - if second_node.content.is_a? String
                      = second_node.content
                    - else
                      = second_node.content.name.to_s
                  - if !second_node.content.is_a?(String)
                    -array_actual_values = Array.new                  
                    -@array_order_actual.each do |aoa|
                      -case aoa 
                        -when 'programado'
                          %td
                            = second_node.content.programado.to_f.round(2)
                            -array_actual_values<<second_node.content.programado.to_f.round(2)
                        -when 'valorizado'
                          %td
                            = second_node.content.valorizado.to_f.round(2)
                            -array_actual_values<<second_node.content.valorizado.to_f.round(2)
                        -when 'valor_ganado'
                          %td
                            = second_node.content.valorGanado.to_f.round(2)
                            -array_actual_values<<second_node.content.valorGanado.to_f.round(2)
                        -when 'real'
                          %td
                            = second_node.content.real.to_f.round(2)
                            -array_actual_values<<second_node.content.real.to_f.round(2)
                        -when 'meta'
                          %td
                            = second_node.content.meta.to_f.round(2)
                            -array_actual_values<<second_node.content.meta.to_f.round(2)

                    -if second_node.content.type == "objeto"
                      - accum = ConsumptionCost.get_the_acumulated(second_node.content.name.to_s[1..10],@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters,@array_columns_prev_delivered_sum)
                    - elsif second_node.content.type == "nodo"
                      - accum = ConsumptionCost.get_accumulated_father(second_node.content.name.to_s,@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters, @array_columns_prev_delivered_sum)

                    -if @array_order_accum_before.count > 0
                      - accum.each do |accum|
                        %td= accum.to_f.round(4).round(2)
                    -if @array_order_accum.count > 0
                      - array_actual_values = [array_actual_values,accum].transpose.map {|x| x.reduce(:+)}
                      -array_actual_values.each do |accum|
                        %td
                          = accum.to_f.round(4).round(2)
                    %td
                    %td
                - if second_node.children.count > 0
                  - second_node.children.each do |third_node|
                    %tr
                      %td
                        %span{:style => 'visibility:hidden'}
                          = '-'*7
                        - if third_node.content.is_a? String
                          = third_node.content
                        - else
                          = third_node.content.name.to_s
                      - if !third_node.content.is_a?(String)
                        -array_actual_values = Array.new
                        -@array_order_actual.each do |aoa|
                          -case aoa 
                            -when 'programado'
                              %td
                                = third_node.content.programado.to_f.round(2)
                                -array_actual_values<<third_node.content.programado.to_f.round(2)
                            -when 'valorizado'
                              %td
                                = third_node.content.valorizado.to_f.round(2)
                                -array_actual_values<<third_node.content.valorizado.to_f.round(2)
                            -when 'valor_ganado'
                              %td
                                = third_node.content.valorGanado.to_f.round(2)
                                -array_actual_values<<third_node.content.valorGanado.to_f.round(2)
                            -when 'real'
                              %td
                                = third_node.content.real.to_f.round(2)
                                -array_actual_values<<third_node.content.real.to_f.round(2)
                            -when 'meta'
                              %td
                                = third_node.content.meta.to_f.round(2)
                                -array_actual_values<<third_node.content.meta.to_f.round(2)

                        -if third_node.content.type == "objeto"
                          - accum = ConsumptionCost.get_the_acumulated(third_node.content.name.to_s[1..10],@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters,@array_columns_prev_delivered_sum)
                        - elsif third_node.content.type == "nodo"
                          - accum = ConsumptionCost.get_accumulated_father(third_node.content.name.to_s,@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters, @array_columns_prev_delivered_sum)
                        -if @array_order_accum_before.count > 0
                          - accum.each do |accum|
                            %td= accum.to_f.round(4).round(2)
                        -if @array_order_accum.count > 0
                          - array_actual_values = [array_actual_values,accum].transpose.map {|x| x.reduce(:+)}
                          -array_actual_values.each do |accum|
                            %td
                              = accum.to_f.round(4).round(2)
                        %td
                        %td
                    - if third_node.children.count > 0
                      - third_node.children.each do |fourth_node|
                        %tr
                          %td
                            %span{:style => 'visibility:hidden'}
                              = '-'*9
                            - if fourth_node.content.is_a?(String)
                              = fourth_node.content
                            - else
                              = fourth_node.content.name.to_s
                          - if !fourth_node.content.is_a?(String)
                            -array_actual_values = Array.new
                            -@array_order_actual.each do |aoa|
                              -case aoa 
                                -when 'programado'
                                  %td
                                    = fourth_node.content.programado.to_f.round(2)
                                    -array_actual_values<<fourth_node.content.programado.to_f.round(2)
                                -when 'valorizado'
                                  %td
                                    = fourth_node.content.valorizado.to_f.round(2)
                                    -array_actual_values<<fourth_node.content.valorizado.to_f.round(2)
                                -when 'valor_ganado'
                                  %td
                                    = fourth_node.content.valorGanado.to_f.round(2)
                                    -array_actual_values<<fourth_node.content.valorGanado.to_f.round(2)
                                -when 'real'
                                  %td
                                    = fourth_node.content.real.to_f.round(2)
                                    -array_actual_values<<fourth_node.content.real.to_f.round(2)
                                -when 'meta'
                                  %td
                                    = fourth_node.content.meta.to_f.round(2)
                                    -array_actual_values<<fourth_node.content.meta.to_f.round(2)

                            -if fourth_node.content.type == "objeto"
                              - accum = ConsumptionCost.get_the_acumulated(fourth_node.content.name.to_s[1..10],@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters, @array_columns_prev_delivered_sum)
                            - elsif fourth_node.content.type == "nodo"
                              - accum = ConsumptionCost.get_accumulated_father(fourth_node.content.name.to_s,@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters, @array_columns_prev_delivered_sum)
                            -if @array_order_accum_before.count > 0
                              - accum.each do |accum|
                                %td= accum.to_f.round(4).round(2)
                            -if @array_order_accum.count > 0
                              - array_actual_values = [array_actual_values,accum].transpose.map {|x| x.reduce(:+)}
                              -array_actual_values.each do |accum|
                                %td
                                  = accum.to_f.round(4).round(2)
                            %td
                            %td
                        - if fourth_node.children.count > 0
                          - fourth_node.children.each do |five_node|
                            %tr
                              %td
                                %span{:style => 'visibility:hidden'}
                                  = '-'*11
                                - if five_node.content.is_a? String
                                  = five_node.content
                                - else
                                  = five_node.content.name.to_s
                              - if !five_node.content.is_a?(String)
                                -array_actual_values = Array.new
                                -@array_order_actual.each do |aoa|
                                  -case aoa 
                                    -when 'programado'
                                      %td
                                        = five_node.content.programado.to_f.round(2)
                                        -array_actual_values<<five_node.content.programado.to_f.round(2)
                                    -when 'valorizado'
                                      %td
                                        = five_node.content.valorizado.to_f.round(2)
                                        -array_actual_values<<five_node.content.valorizado.to_f.round(2)
                                    -when 'valor_ganado'
                                      %td
                                        = five_node.content.valorGanado.to_f.round(2)
                                        -array_actual_values<<five_node.content.valorGanado.to_f.round(2)
                                    -when 'real'
                                      %td
                                        = five_node.content.real.to_f.round(2)
                                        -array_actual_values<<five_node.content.real.to_f.round(2)
                                    -when 'meta'
                                      %td
                                        = five_node.content.meta.to_f.round(2)
                                        -array_actual_values<<five_node.content.meta.to_f.round(2)

                                -if five_node.content.type == "objeto"
                                  - accum = ConsumptionCost.get_the_acumulated(five_node.content.name.to_s[1..10],@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters, @array_columns_prev_delivered_sum)
                                - elsif five_node.content.type == "nodo"
                                  - accum = ConsumptionCost.get_accumulated_father(five_node.content.name.to_s,@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters, @array_columns_prev_delivered_sum)
                                -if @array_order_accum_before.count > 0
                                  - accum.each do |accum|
                                    %td= accum.to_f.round(4).round(2)
                                -if @array_order_accum.count > 0
                                  - array_actual_values = [array_actual_values,accum].transpose.map {|x| x.reduce(:+)}
                                  -array_actual_values.each do |accum|
                                    %td
                                      = accum.to_f.round(4).round(2)
                                %td
                                %td
                            - if five_node.children.count > 0
                              - five_node.children.each do |six_node|
                                %tr
                                  %td
                                    %span{:style => 'visibility:hidden'}
                                      = '-'*13
                                    = six_node.content.name.to_s
                                  -array_actual_values = Array.new
                                  -@array_order_actual.each do |aoa|
                                    -case aoa 
                                      -when 'programado'
                                        %td
                                          = six_node.content.programado.to_f.round(2)
                                          -array_actual_values<<six_node.content.programado.to_f.round(2)
                                      -when 'valorizado'
                                        %td
                                          = six_node.content.valorizado.to_f.round(2)
                                          -array_actual_values<<six_node.content.valorizado.to_f.round(2)
                                      -when 'valor_ganado'
                                        %td
                                          = six_node.content.valorGanado.to_f.round(2)
                                          -array_actual_values<<six_node.content.valorGanado.to_f.round(2)
                                      -when 'real'
                                        %td
                                          = six_node.content.real.to_f.round(2)
                                          -array_actual_values<<six_node.content.real.to_f.round(2)
                                      -when 'meta'
                                        %td
                                          = six_node.content.meta.to_f.round(2)
                                          -array_actual_values<<six_node.content.meta.to_f.round(2)
                                  -if six_node.content.type == "objeto"
                                    - accum = ConsumptionCost.get_the_acumulated(six_node.content.name.to_s[1..10],@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters,@array_columns_prev_delivered_sum)
                                  - elsif six_node.content.type == "nodo"
                                    - accum = ConsumptionCost.get_accumulated_father(six_node.content.name.to_s,@for_acumulated_end_date,@cost_center_id,@type_amount,@array_order_filters, @array_columns_prev_delivered_sum)
                                  -if @array_order_accum_before.count > 0
                                    - accum.each do |accum|
                                      %td= accum.to_f.round(4).round(2)
                                  -if @array_order_accum.count > 0
                                    - array_actual_values = [array_actual_values,accum].transpose.map {|x| x.reduce(:+)}
                                    -array_actual_values.each do |accum|
                                      %td
                                        = accum.to_f.round(4).round(2)                        
                                  %td
                                  %td

- else

  .col-xs-12.col-sm-12.col-md-12.col-lg-12
    .alert.alert-danger.fade.in
      %button.close{"data-dismiss" => "alert"}
        ×
      %i.fa-fw.fa.fa-check
      %strong Oops! Aviso!
      No estan completos los datos para hacer la consulta o el resultado es vacio en la fecha seleccionada.