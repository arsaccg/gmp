#wid-id-0.jarviswidget{"data-widget-colorbutton" => "false", "data-widget-editbutton" => "false"}
  %header
    %span.widget-icon
      %i.fa.fa-pencil-square-o.fa-fw 
    %h2
      %strong Orden de Servicio
  %div{:style => "padding-top: 0"}
    .jarviswidget-editbox
    .widget-body 
      = simple_form_for([:logistics, @orderOfService], html: {class: 'form-horizontal', autocomplete: 'off' }) do |f|
        = hidden_field_tag "company_id", @company
        - if @action == 'edit'
          = hidden_field_tag "order_of_service[date_of_issue]", @orderOfService.date_of_issue.to_date rescue Time.now.to_date
        - else
          = hidden_field_tag "order_of_service[date_of_issue]", DateTime.now.to_date
        = hidden_field_tag "order_of_service[cost_center_id]", @cost_center_id
        .col-sm-12
          %fieldset
            %legend{'style' => 'border:none'}
            .row
              .col-md-4
                .form-group
                  %label.col-md-3.control-label Proveedores
                  .col-md-9
                    .input-group
                      %select.form-control#category-select{:name =>"order_of_service[entity_id]"}
                        - @suppliers.each do |supp|
                          - if @orderOfService.entity_id == supp.id
                            %option{:value => "#{supp.id}", :selected => true}
                              = supp.name
                          - else
                            %option{:value => "#{supp.id}"}
                              = supp.name
                      %span.input-group-addon
                        %i.fa.fa-truck
              .col-md-4
                .form-group
                  %label.col-md-4.control-label Forma de pago
                  .col-md-8
                    .input-group
                      %select.form-control#category-select{:name =>"order_of_service[method_of_payment_id]"}
                        - @methodOfPayments.each do |mop|
                          - if @orderOfService.method_of_payment_id == mop.id
                            %option{:value => "#{mop.id}", :selected => true}
                              = mop.name
                          - else
                            %option{:value => "#{mop.id}"}
                              = mop.name
                      %span.input-group-addon
                        %i.fa.fa-gears
              .col-md-4
                .form-group
                  %label.col-md-4.control-label Fecha de Servicio
                  .col-md-8
                    .input-group.smart-form
                      = f.input :date_of_service, placeholder: "Fecha de servicio", as: :string, :input_html => {:class => 'form-control', type: "date", :required => true}, label: false
                      %span.input-group-addon
                        %i.fa.fa-calendar
            .row
              .col-md-4
                .form-group
                  %label.col-md-4.control-label Moneda
                  .col-md-8
                    .input-group
                      %select.form-control#category-select{:name =>"order_of_service[money_id]"}
                        - @moneys.each do |money|
                          - if @orderOfService.money_id == money.id
                            %option{:value => "#{money.id}", :rel => "", :selected => true}
                              = money.name
                          - else
                            %option{:value => "#{money.id}", :rel => ""}
                              = money.name
                      %span.input-group-addon
                        %i.fa.fa-money
              .col-md-4
                .form-group
                  %label.col-md-4.control-label Tipo de cambio
                  .col-md-8
                    .input-group
                      = text_field(:order_of_service, :exchange_of_rate, :value => "#{@orderOfService.exchange_of_rate}", class: "form-control")
                      %span.input-group-addon
                        %i.fa.fa-warning
              .col-md-4
                .form-group
                  %label.col-md-2.control-label Estado
                  .col-md-10
                    .input-group
                      = f.input :state, :input_html => {:name => 'state', :class => 'form-control', :value => translate_order_service_state(@orderOfService.state)}, label: false, readonly: true
                      %span.input-group-addon
                        %i.fa.fa-flag
            .row
              .col-md-4
                .form-group
                  %label.col-md-3.control-label Responsable
                  .col-md-9
                    .input-group
                      - if @orderOfService.user != nil
                        = text_field(:order_of_service, :liable, class: "form-control", value: "#{@orderOfService.user.first_name} #{@orderOfService.user.last_name}", readonly: true)
                      - else
                        = text_field(:order_of_service, :liable, class: "form-control", value: "#{current_user.first_name} #{current_user.last_name}", readonly: true)
                      %span.input-group-addon
                        %i.fa.fa-male
              .col-md-8
                .form-group
                  %label.col-md-2.control-label Glosa
                  .col-md-10
                    .input-group.smart-form
                      = f.input :description, placeholder: "Glosa", :input_html => {:class => 'form-control'}, label: false
                      %span.input-group-addon
                        %i.fa.fa-align-justify
          %br
        .col-sm-12
          %fieldset
            %legend Detalle de Orden de Servicio
            .form-group
              .col-lg-12
                %label(for="article_id" class="col-lg-2 control-label") Insumos
                .col-lg-6 
                  %input#article-select.select2.bigdrop.select2-offscreen.form-control{'name' => 'article_id', 'type' => 'hidden', 'style' => 'width:100%;padding: 0;border: none;'}
                .col-lg-1
                  = text_field_tag 'amount', nil, class: 'form-control', id: 'article-amount', value: '1'
                .col-lg-2 
                  %div(class="col-lg-3")
                    %a{:href => "javascript:add_article_item();", :id => "btn-add-article", :class => "btn btn-success", :role => "button"}
                      Agregar Insumo
            .form-group
              .col-lg-3
              .col-lg-12
                %table#summary-orders-service.table.table-striped.table-bordered.table-hover.has-tickbox.smart-form
                  %thead
                    %tr
                      %th Código Insumo
                      %th Nombre del Insumo
                      %th Unidad de Medida
                      %th Cantidad
                      %th Sector
                      %th Fase
                      %th Precio Unitario
                      %th Precio antes de IGV
                      %th ¿Aplica IGV?
                      %th Precio después de IGV
                      %th Operaciones Adicionales
                      %th Glosa
                      %th Eliminar
                  %tbody#article_items_table
                    - if @action == 'edit'
                      - array_values = Array.new
                      - @orderOfService.order_of_service_details.each do |oos|
                        - array_values << @reg_n.to_s
                        %tr
                          %td.article-id(style="display:none")
                            = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][article_id]', oos.article.id
                          %td.measurement-id(style="display:none")
                            = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][unit_of_measurement_id]', oos.unit_of_measurement.id
                          %td.discount-before{ :style => "display:none"}
                            = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][discount_before]', oos.discount_before, class: "form-control discount-before"
                          %td.discount-after{ :style => "display:none"}
                            = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][discount_after]', oos.discount_after, class: "form-control discount-after"
                          %td.discount-igv{ :style => "display:none"}
                            = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][quantity_igv]', oos.quantity_igv, class: "form-control discount-igv"
                          %td=oos.article.code
                          %td=oos.article.name
                          %td.unit-of-measurement
                            =oos.unit_of_measurement.symbol
                          %td.amount
                            = text_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][amount]', oos.amount, class: "form-control amount-item", onfocusout: "calculatePrice(this);", onkeypress: "return isNumber(event);"
                          %td.sector.col-md-1
                            %select.form-control{:name =>"order_of_service[order_of_service_details_attributes][#{@reg_n.to_s}][sector_id]"}
                              %option{:value => "0", :selected => true, :disabled => true} Seleccionar Sector
                              - @sectors.each do |sector|
                                - if sector.id == oos.sector_id
                                  %option{:value => "#{sector.id}", :selected => true}
                                    = sector.name
                                - else
                                  %option{:value => "#{sector.id}"}
                                    = sector.name
                          %td.phase
                            %select.form-control{:name =>"order_of_service[order_of_service_details_attributes][#{@reg_n.to_s}][phase_id]"}
                              %option{:value => "0", :selected => true, :disabled => true} Seleccionar Fase
                              - @phases.each do |phase|
                                - if phase.id == oos.phase_id
                                  %option{:value => "#{phase.id}", :selected => true}
                                    = phase.name
                                - else
                                  %option{:value => "#{phase.id}"}
                                    = phase.name
                          %td.unit-price
                            = text_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][unit_price]', oos.unit_price, class: "form-control unit-price", onfocusout: "calculatePriceWithourIgv(this);", onkeypress: "return isNumber(event);"
                          %td.price-without-igv
                            - @unit_price_without_igv = oos.amount * oos.unit_price
                            = text_field_tag 'unit_price_before_igv', "#{@unit_price_without_igv}", class: "form-control unit-price-before-igv", :readonly => true
                          %td.check-igv
                            %label.checkbox
                              - if oos.igv != nil
                                = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][igv]', ''
                                = check_box_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][igv]', nil, true, { class: 'order_purchase_igv', onchange: "enableFieldsForIgv(this);" }
                                %i
                              - else
                                = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][igv]', ''
                                = check_box_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][igv]', nil, nil, { class: 'order_purchase_igv', onchange: "enableFieldsForIgv(this);" }
                                %i
                          %td.price-with-igv
                            = text_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][unit_price_igv]', oos.unit_price_igv , class: "form-control unit-price-igv", :readonly => true
                          %td.aditional-operations{:style => 'text-align: center'}
                            %a.btn.btn-info.btn-xs{'data-toggle' => 'modal', 'href' => "#", 'data-target' => "#modal-service-#{oos.created_at.to_time.to_i}"}
                              %strong
                                %i.fa.fa-superscript
                          %td
                            = text_area_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][description]', oos.description, class: "form-control description"
                          %td(style="display:none")
                            = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][id]', oos.id
                          %td(style="display:none")
                            = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + @reg_n.to_s + '][order_of_service_id]', @orderOfService.id
                          %td.delete-item
                            %label.checkbox
                              = check_box 'order_of_service', '[order_of_service_details_attributes][' + @reg_n.to_s + '][_destroy]'
                              %i
                          - @reg_n += 1

                - i = 0
                - @orderOfService.order_of_service_details.each do |oos|
                  .modal.fade{"id" => "modal-service-#{oos.created_at.to_time.to_i}", "aria-hidden" => "true", "aria-labelledby" => "modalLoadingLabel", role: "dialog", tabindex: "-1"}
                    .modal-dialog
                      .modal-content
                        .modal-header
                          %button{"type" => "button", "class" => "close", "data-dismiss" => "modal", "aria-hidden" => "true"} ×
                          %h4.modal-title Operaciones Adicionales
                        .modal-body
                          .smart-form
                            %fieldset
                              = hidden_field_tag 'id_modal', '', id: "modal-service-#{oos.created_at.to_time.to_i}-hidden"
                              .row
                                %label.label.col.col-2{for: "extra_calculation_id"} Concepto
                                .col.col-10
                                  %label.input
                                    %select.form-control{:name =>"extra_calculation_id", :id => "modal-service-#{oos.created_at.to_time.to_i}-select-calc"}
                                      - @extra_calculations.each do |calculation|
                                        %option{:value => "#{calculation.id}"}
                                          = calculation.concept

                              .row
                                %label.label.col.col-2{for: "type"} Tipo
                                .col.col-10
                                  %label.input
                                    %select.form-control{:name =>"type", :id => "modal-service-#{oos.created_at.to_time.to_i}-select-type"}
                                      %option{:value => "percent"}
                                        (%)
                                      %option{:value => "soles"}
                                        (S/.)

                              .row
                                %label.label.col.col-2{for: "value"} Valor
                                .col.col-10
                                  %label.input
                                    %i.icon-append.fa.fa-money
                                    = text_field_tag 'value', nil, id: "modal-service-#{oos.created_at.to_time.to_i}-input-value"

                              .row
                                %label.label.col.col-2{for: "apply"} Aplicar
                                .col.col-10
                                  %label.input
                                    %select.form-control{:name =>"apply", :id => "modal-service-#{oos.created_at.to_time.to_i}-select-apply"}
                                      %option{:value => "before"}
                                        Antes de IGV
                                      %option{:value => "after"}
                                        Después de IGV

                              .row
                                %label.label.col.col-2{for: "operation"} +/-
                                .col.col-10
                                  %label.input
                                    %select.form-control{:name =>"operation", :id => "modal-service-#{oos.created_at.to_time.to_i}-select-operation"}
                                      %option{:value => "sum"}
                                        = '+'
                                      %option{:value => "minius"}
                                        = '-'

                            %fieldset
                              %h3 Listado de Operaciones
                              %br
                              .row
                                %section.col.col-md-12{'id' => "modal-service-#{oos.created_at.to_time.to_i}-section"}
                                  - oos.order_service_extra_calculations.each do |order_operation|
                                    - @reg_n_2 = ((Time.now.to_f)*100).to_i
                                    .col.col-md-12
                                      .col.col-md-1
                                        %i.fa.fa-check
                                      .col.col-md-3
                                        = order_operation.extra_calculation.concept
                                        = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + array_values[i].to_s + '][order_service_extra_calculations_attributes][' + @reg_n_2.to_s + '][extra_calculation_id]', order_operation.extra_calculation_id
                                      = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + array_values[i].to_s + '][order_service_extra_calculations_attributes][' + @reg_n_2.to_s + '][type]', order_operation.type
                                      .col.col-md-2
                                        - if order_operation.type == 'soles'
                                          = order_operation.value.to_s + '(S/.)'
                                        - elsif order_operation.type == 'percent'
                                          = order_operation.value.to_s + '(%)'
                                        = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + array_values[i].to_s + '][order_service_extra_calculations_attributes][' + @reg_n_2.to_s + '][value]', order_operation.value
                                      .col.col-md-3
                                        - if order_operation.apply == 'before'
                                          Antes de IGV
                                        - elsif order_operation.apply == 'after'
                                          Después de IGV
                                        = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + array_values[i].to_s + '][order_service_extra_calculations_attributes][' + @reg_n_2.to_s + '][apply]', order_operation.apply
                                      .col.col-md-3
                                        = check_box_tag 'order_of_service[order_of_service_details_attributes][' + array_values[i].to_s + '][order_service_extra_calculations_attributes][' + @reg_n_2.to_s + '][_destroy]'
                                        %label Eliminar
                                      = hidden_field_tag 'order_of_service[order_of_service_details_attributes][' + array_values[i].to_s + '][order_service_extra_calculations_attributes][' + @reg_n_2.to_s + '][operation]', order_operation.operation

                            %footer
                              %button{:type => "button", :class => "btn btn-primary", :onclick => "add_extra_operation(this)", :rel => "modal-service-#{oos.created_at.to_time.to_i}"} Agregar Operación
        .form-actions{:style => "margin-top: 0;"}
          .row
            .col-md-12
              %button.btn.btn-primary{type: "submit"}
                %i.fa.fa-save
                  Guardar

:javascript
  
  $(document).ready(function(){
    $('#article-select').select2({
      placeholder: "Buscar Insumos...",
      minimumInputLength: 3,
      ajax: {
        url: "#{display_articles_logistics_order_of_services_path}",
        dataType: 'json',
        type: 'POST',
        quietMillis: 100,
        data: function(term, page){
          return {
            q: term,
            page: page,
            authenticity_token: "#{form_authenticity_token}"
          };
        },
        results: function(data, page){
          return {results: data.articles};
        }
      },
      formatResult: function(node){ return '<div>' + node.code + ' - ' + node.name + ' - ' + node.symbol + '</div>' },
      formatSelection: function(node){ return (node.code + ' - ' + node.name + ' - ' + node.symbol) },
      escapeMarkup: function (m) { return m; }
    });

    $('#new_order_of_service').ajaxForm({
      beforeSubmit: function() {
        $('#new_order_of_service').validate({
          // Rules for form validation
          rules : {
            'order_of_service[supplier_id]': {
              required: true
            },
            'order_of_service[money_id]': {
              required: true
            },
            'order_of_service[description]':{
              required: true
            },
            'order_of_service[method_of_payment_id]': {
              required: true
            },
            'order_of_service[date_of_issue]': {
              required: true
            },
            'order_of_service[expiration_date]': {
              required: true
            },
            'order_of_service[delivery_date]': {
              required: true
            },
            'order_of_service[date_of_service]': {
              required: true
            }
          },

          // Messages for form validation
          messages : {
            'order_of_service[supplier_id]': "Porfavor, especifica el proveedor.",
            'order_of_service[money_id]': "Porfavor, especifica el tipo de moneda con que se trabajará.",
            'order_of_service[method_of_payment_id]': "Porfavor, especifica el método de págo.",
            'order_of_service[date_of_issue]': "Porfavor, especifica la fecha de emisión.",
            'order_of_service[expiration_date]': "Porfavor, especifica la fecha de expiración.",
            'order_of_service[delivery_date]': "Porfavor, especifica la fecha de entrega.",
            'order_of_service[date_of_service]': {required: 'Porfavor, especifica la fecha de servicio.'},
            'order_of_service[description]':{
              required: 'Porfavor, especifica la descripción.'
            }
          },
          // Do not change code below
          errorPlacement : function(error, element) {
            error.insertAfter(element.parent());
          }
        });

        return $('#new_order_of_service').valid();
      },
      target: '#content'
    });

    $('form[id^="edit_order_of_service"]').ajaxForm({
      beforeSubmit: function(arr, $form, options) {
        $form.validate({
          // Rules for form validation
          rules : {
            'order_of_service[supplier_id]': {
              required: true
            },
            'order_of_service[money_id]': {
              required: true
            },
            'order_of_service[method_of_payment_id]': {
              required: true
            },
            'order_of_service[date_of_issue]': {
              required: true
            },
            'order_of_service[expiration_date]': {
              required: true
            },
            'order_of_service[delivery_date]': {
              required: true
            }
          },

          // Messages for form validation
          messages : {
            'order_of_service[supplier_id]': "Porfavor, especifica el proveedor.",
            'order_of_service[money_id]': "Porfavor, especifica el tipo de moneda con que se trabajará.",
            'order_of_service[method_of_payment_id]': "Porfavor, especifica el método de págo.",
            'order_of_service[date_of_issue]': "Porfavor, especifica la fecha de emisión.",
            'order_of_service[expiration_date]': "Porfavor, especifica la fecha de expiración.",
            'order_of_service[delivery_date]': "Porfavor, especifica la fecha de entrega."
          },
          highlight: function (element) {
            $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
          },
          unhighlight: function (element) {
            $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
          },
          errorElement: 'span',
          errorClass: 'help-block',
          errorPlacement: function (error, element) {
            if (element.parent('.input-group').length) {
              error.insertAfter(element.parent());
            } else {
              error.insertAfter(element);
            }
          }
        });

        return $form.valid();
      },
      target: '#content'
    });

  });

  function calculatePriceWithourIgv(element){
    var amount = parseInt($(element).parent().parent().siblings('.amount').find('input').val());

    var price_without_igv = parseFloat($(element).val() * amount).toFixed(2);

    $(element).parent().parent().siblings('.price-without-igv').find('input').val(price_without_igv);
    $(element).parent().parent().siblings('.price-with-igv').find('input').val(price_without_igv);
  }

  function calculatePriceWithourIgvAmount(element){
    var unit = parseInt($(element).parent().parent().siblings('.unit-price').children().children().val());
    var price_without_igv = parseFloat($(element).val() * unit).toFixed(2);

    $(element).parent().parent().siblings('.price-without-igv').find('input').val(price_without_igv);
    $(element).parent().parent().siblings('.price-with-igv').find('input').val(price_without_igv);
  }

  function enableFieldsForIgv(element){
    if($(element).is(":checked")){
      var price_without_igv = $(element).parent().parent().siblings('.price-without-igv').find('input').val();
      $(element).parent().parent().siblings('.price-with-igv').find('input').val(parseFloat(price_without_igv*parseFloat("#{@igv}")).toFixed(2));
      $(element).parent().parent().siblings('.discount-igv').find('input').val(parseFloat(price_without_igv * (1 - parseFloat("#{@igv}"))));
    } else {
      var price_without_igv = $(element).parent().parent().siblings('.price-without-igv').find('input').val();
      $(element).parent().parent().siblings('.price-with-igv').find('input').val(price_without_igv);
      $(element).parent().parent().siblings('.discount-igv').find('input').val(0);
    }
  }

  function isNumber(evt) {
    evt = (evt) ? evt : window.event;
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (charCode > 31 && (charCode < 48 || charCode > 57) && charCode != 46) {
        return false;
    }
    return true;
  }

  function add_article_item(){
    var article_id = $("#article-select").val();
    str_item = {authenticity_token: "#{form_authenticity_token}", article_id: $("#article-select").val(), amount: $("#article-amount").val()};

    append_url_ajax('#{add_order_service_item_field_logistics_order_of_services_path}', 'article_items_table', str_item, 0, 'POST');
    
    if($('#new_order_of_service').length > 0){
      append_url_ajax('#{add_modal_extra_operations_logistics_order_of_services_path}', 'new_order_of_service', str_item, 0, 'POST');
    }

    if($('form[id^="edit_order_of_service"]').length > 0){
      append_url_ajax('#{add_modal_extra_operations_logistics_order_of_services_path}', $('form[id^="edit_order_of_service"]').attr('id'), str_item, 0, 'POST');
    }
  }

  function add_extra_operation(obj){

    var id_content = $(obj).attr('rel') + '-section';

    var concept = '#' + $(obj).attr('rel') + '-select-calc';
    var type = '#' + $(obj).attr('rel') + '-select-type';
    var name_concept = '#' + $(obj).attr('rel') + '-select-calc option:selected';
    var name_type = '#' + $(obj).attr('rel') + '-select-type option:selected';

    var value = '#' + $(obj).attr('rel') + '-input-value';

    var apply = '#' + $(obj).attr('rel') + '-select-apply';
    var operation = '#' + $(obj).attr('rel') + '-select-operation';
    var name_apply = '#' + $(obj).attr('rel') + '-select-apply option:selected';

    var reg_n = '#' + $(obj).attr('rel') + '-hidden';

    var str_data = { concept: $(concept).val(), type: $(type).val(), value: $(value).val(), apply: $(apply).val(), operation: $(operation).val(), name_concept: $(name_concept).text(), name_type: $(name_type).text(), name_apply: $(name_apply).text(), reg_n: $(reg_n).val() };

    /* Data for Calculate */
    amount_bruto = $('#tr-' + $(reg_n).val() + ' td.amount div input').val()*$('#tr-' + $(reg_n).val() + ' td.unit-price div input').val();

    /* Referencial Data */
    path_jquery_before = '#tr-' + $(reg_n).val() + ' td.price-without-igv input';
    path_jquery_after = '#tr-' + $(reg_n).val() + ' td.price-with-igv input';
    path_jquery_igv = '#tr-' + $(reg_n).val() + ' td.check-igv .checkbox input';
    /* Amounts */
    path_jquery_discount_before = '#tr-' + $(reg_n).val() + ' td.discount-before input';
    path_jquery_discount_after = '#tr-' + $(reg_n).val() + ' td.discount-after input';
    path_jquery_discount_igv = '#tr-' + $(reg_n).val() + ' td.discount-igv input';

    if($(path_jquery_before).val() != ''){

      ancient_value_before = parseFloat($(path_jquery_before).val());
      ancient_value_after = parseFloat($(path_jquery_after).val());

      if( $(apply).val() == 'before' ){

        if( $(operation).val() == 'sum' ){
          if( $(type).val() == 'soles' ){
            value_before = $(path_jquery_discount_before).val() + parseFloat($(value).val());
            $(path_jquery_discount_before).val(value_before);
          } else {
            value_before = $(path_jquery_discount_before).val() + parseFloat((amount_bruto*($(value).val()/100)));
            $(path_jquery_discount_before).val(value_before);
          }
        } else {
          if( $(type).val() == 'soles' ){
            value_before = $(path_jquery_discount_before).val() - parseFloat($(value).val());
            $(path_jquery_discount_before).val(value_before);
            console.log($(path_jquery_discount_before).val());
          } else {
            value_before = $(path_jquery_discount_before).val() - parseFloat((amount_bruto*($(value).val()/100)));
            $(path_jquery_discount_before).val(value_before);
            console.log($(path_jquery_discount_before).val());
          }
        }

        if($(path_jquery_igv).is(":checked")){
          $(path_jquery_before).val( parseFloat(amount_bruto) + parseFloat($(path_jquery_discount_before).val()) );
          $(path_jquery_discount_igv).val( (parseFloat(amount_bruto) + parseFloat($(path_jquery_discount_before).val())) * (1 - parseFloat("#{@igv}")) );
          $(path_jquery_after).val( (parseFloat(amount_bruto) + parseFloat($(path_jquery_discount_before).val())) * parseFloat("#{@igv}") );
        } else {
          $(path_jquery_before).val( parseFloat(amount_bruto) + parseFloat($(path_jquery_discount_before).val()) );
          $(path_jquery_after).val( parseFloat(amount_bruto) + parseFloat($(path_jquery_discount_before).val()) );
          $(path_jquery_discount_igv).val(0);
        }

      } else {

        if( $(operation).val() == 'sum' ){
          if( $(type).val() == 'soles' ){
            value_after = $(path_jquery_discount_after).val() + parseFloat($(value).val()).toFixed(2);
            $(path_jquery_discount_after).val(value_after);
          } else {
            value_after = $(path_jquery_discount_after).val() + parseFloat($(path_jquery_after).val()*($(value).val()/100)).toFixed(2);
            $(path_jquery_discount_after).val(value_after);
          }
        } else {
          if( $(type).val() == 'soles' ){
            value_after = $(path_jquery_discount_after).val() - parseFloat($(value).val()).toFixed(2);
            $(path_jquery_discount_after).val(value_after);
          } else {
            value_after = $(path_jquery_discount_after).val() - parseFloat($(path_jquery_after).val()*($(value).val()/100)).toFixed(2);
            $(path_jquery_discount_after).val(value_after);
          }
        }

      }

      append_url_ajax('#{add_more_row_form_extra_op_logistics_order_of_services_path}', id_content, str_data, 0, 'POST');

    } else {

      alert('No se ha calculado el Precio antes de IGV.');

    }
  }

  function set_id_modeling(obj, id_modeling){
    $current_tr_parent = $(obj).parent().parent().attr('id');
    id_modal_target = $(obj).attr('data-target');
    $id_generated = $current_tr_parent.split('-')[1];
    $(id_modal_target + '-hidden').val($id_generated);
  }

  function delete_item(code){
    id_modal = $("#tr-" + code + " td.aditional-operations a").attr('data-target');
    $("#tr-" + code).remove();
    $(id_modal).remove();
  }