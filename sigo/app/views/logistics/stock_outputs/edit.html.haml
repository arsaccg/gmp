#content-inside
  .row
    .col-xs-12.col-sm-7.col-md-7.col-lg-4
      %h1.page-title.txt-color-blueDark
        %i.fa.fa-pencil-square-o.fa-fw 
        Editar Salida de Almacén
  #widget-grid
    .row
      %article.col-sm-12.col-md-12.col-lg-12
        = render :partial => 'form'

:javascript
  // DO NOT REMOVE : GLOBAL FUNCTIONS!
  pageSetUp();

  $(document).ready(function(){
    //$('#stock_input_issue_date').datepicker.noConflict;
    // Back
    $('#backlist').click(function(){
      load_url_ajax("#{logistics_stock_outputs_path}", 'content', null, null, 'GET');
    });

    loadScript("#{ asset_path 'plugin/bootstrap-wizard/jquery.bootstrap.wizard.min.js', type: :javascript }", runBootstrapWizard);
  
    //Bootstrap Wizard Validations

    function runBootstrapWizard() {

      var $validator = $('form[id^="edit_stock_input"]').validate({

        rules: {
          'stock_input[responsible_id]': {
            required: true
          },
          'stock_input[warehouse_id]': {
            required: true
          },
          'stock_input[format_id]': {
            required: true
          },
          'stock_input[period]': {
            required: true
          },
          'stock_input[series]': {
            required: true
          },
          'stock_input[document]': {
            required: true,
            minlength : 1,
            maxlength : 10
          },
          'stock_input[issue_date]': {
            required: true
          },
          'stock_input[phase_id]': {
            required: true
          },
          'stock_input[working_group_id]': {
            required: true
          },
          'stock_input[description]': {
            required: true
          }
        },
        
        messages: {
          'stock_input[responsible_id]': "(*)",
          'stock_input[warehouse_id]': "(*)",
          'stock_input[format_id]': "(*)",
          'stock_input[period]': "(*)",
          'stock_input[series]': "(*)",
          'stock_input[document]' : {
            required : '(*)',
            minlength : "Mín 1 dígito.",
            maxlength : "Máx 10 dígitos.",
          },
          'stock_input[issue_date]': "(*)",
          'stock_input[phase_id]': "(*)",
          'stock_input[working_group_id]': "(*)",
          'stock_input[description]': "(*)"
        },
        
        highlight: function (element) {
          $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
        },
        unhighlight: function (element) {
          $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
        },
        errorElement: 'span',
        errorClass: 'help-block',
        errorPlacement: function (error, element) {
          if (element.parent('.input-group').length) {
            error.insertAfter(element.parent());
          } else {
            error.insertAfter(element);
          }
        }
      });

    }

  });

  $("#btn-add-article").click(function(){
    var article_id = $("#article-select").val();
    str_item = {authenticity_token: "#{form_authenticity_token}", article_id: $("#article-select").val(), amount: $("#article-amount").val()};

    append_url_ajax('#{add_stock_input_item_field_logistics_stock_outputs_path}', 'summary-pod', str_item, 0, 'POST');
  });

  $("#btn-save").click(function(){
    var $valid = $('form[id^="edit_stock_input"]').valid();
    if (!$valid) {
      e.preventDefault();
    }
         
    $.ajax({
      type: 'POST',
      url: "/logistics/stock_outputs/" + $("#stock_input_id").val(),
      async: false,
      data: $('form[id^="edit_stock_input"]').serialize(),
      dataType : 'html',
      success: function(data) {
        $('#modalLoading').modal('hide');
        $('#content').html(data);
      },
      error : function(xhr, ajaxOptions, thrownError) {
        container.html('<h4 style="margin-top:10px; display:block; text-align:left"><i class="fa fa-warning txt-color-orangeDark"></i> Error 404! Page not found.</h4>');
      }
    });
  });

  function isNumber(evt) {
    evt = (evt) ? evt : window.event;
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (charCode > 31 && (charCode < 48 || charCode > 57) && charCode != 46) {
        return false;
    }
    return true;
  }

  function minmax(value, min, max){
    if(parseInt(value) < min || isNaN(value)) 
      return min; 
    else if(parseInt(value) > max) 
      return max; 
    else return value;
  }
